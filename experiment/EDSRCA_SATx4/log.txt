add self supervised for edsr
EDSR_Zoom(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (model_ssl): EDSR_SSL(
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (body): Sequential(
      (0): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (1): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (2): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (3): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (4): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (5): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (6): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (7): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (8): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (9): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (10): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (11): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (12): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (13): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (14): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (15): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
        )
      )
      (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (tail): Sequential(
      (0): Upsampler(
        (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
        (2): ReLU(inplace)
        (3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): PixelShuffle(upscale_factor=2)
        (5): ReLU(inplace)
      )
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (CALayer_head): CALayer(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (conv_du): Sequential(
      (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
      (3): Sigmoid()
    )
  )
  (CALayer_tail): CALayer(
    (avg_pool): AdaptiveAvgPool2d(output_size=1)
    (conv_du): Sequential(
      (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
      (3): Sigmoid()
    )
  )
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (1): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (2): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (3): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (4): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (5): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (6): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (7): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (8): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (9): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (10): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (11): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (12): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (13): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (14): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (15): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): CALayer(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (conv_du): Sequential(
            (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
            (1): ReLU(inplace)
            (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
            (3): Sigmoid()
          )
        )
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): ReLU(inplace)
      (3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): PixelShuffle(upscale_factor=2)
      (5): ReLU(inplace)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/15600]	[L1: 31.9617]	[L1: 48.1622]	26.7+222.7s
[3200/15600]	[L1: 28.1603]	[L1: 44.0998]	25.7+41.8s
[4800/15600]	[L1: 26.6067]	[L1: 42.1624]	25.7+12.8s
[6400/15600]	[L1: 25.5771]	[L1: 40.6884]	25.6+16.8s
[8000/15600]	[L1: 24.9637]	[L1: 39.6864]	25.7+17.1s
[9600/15600]	[L1: 24.4064]	[L1: 38.8823]	25.8+6.2s
[11200/15600]	[L1: 24.0460]	[L1: 38.2151]	25.8+2.7s
[12800/15600]	[L1: 23.8200]	[L1: 37.7845]	26.4+2.2s
[14400/15600]	[L1: 23.5840]	[L1: 37.3624]	26.4+3.0s

Evaluation:
[SRRAW x4]	PSNR: 19.914 (Best: 19.914 @epoch 1)
Forward: 3.95s

Saving...
Total: 7.51s

[Epoch 2]	Learning rate: 1.00e-4
[1600/15600]	[L1: 21.1153]	[L1: 33.7862]	25.7+5.6s
[3200/15600]	[L1: 21.0631]	[L1: 33.5939]	26.3+2.2s
[4800/15600]	[L1: 21.1269]	[L1: 33.6741]	26.4+4.4s
[6400/15600]	[L1: 21.0601]	[L1: 33.6597]	26.1+5.0s
[8000/15600]	[L1: 21.1451]	[L1: 33.6868]	25.9+3.2s
[9600/15600]	[L1: 21.0761]	[L1: 33.5672]	26.3+8.4s
[11200/15600]	[L1: 21.1092]	[L1: 33.4826]	26.0+10.7s
[12800/15600]	[L1: 21.0770]	[L1: 33.4254]	25.6+4.2s
[14400/15600]	[L1: 21.0667]	[L1: 33.3472]	26.3+9.1s

Evaluation:
[SRRAW x4]	PSNR: 19.289 (Best: 19.914 @epoch 1)
Forward: 3.42s

Saving...
Total: 5.72s

[Epoch 3]	Learning rate: 1.00e-4
[1600/15600]	[L1: 20.8093]	[L1: 32.7943]	26.1+10.0s
[3200/15600]	[L1: 20.9860]	[L1: 32.8126]	25.7+5.4s
[4800/15600]	[L1: 20.9106]	[L1: 32.6157]	25.9+8.6s
[6400/15600]	[L1: 20.7485]	[L1: 32.4369]	25.9+4.0s
[8000/15600]	[L1: 20.7300]	[L1: 32.4604]	25.8+9.1s
[9600/15600]	[L1: 20.6715]	[L1: 32.2546]	25.8+8.0s
[11200/15600]	[L1: 20.6422]	[L1: 32.2209]	25.7+9.0s
[12800/15600]	[L1: 20.6151]	[L1: 32.2193]	25.8+9.8s
[14400/15600]	[L1: 20.6037]	[L1: 32.1830]	25.6+11.4s

Evaluation:
[SRRAW x4]	PSNR: 19.406 (Best: 19.914 @epoch 1)
Forward: 3.68s

Saving...
Total: 6.11s

[Epoch 4]	Learning rate: 1.00e-4
[1600/15600]	[L1: 20.6814]	[L1: 31.6327]	25.6+11.7s
[3200/15600]	[L1: 20.6100]	[L1: 31.5595]	25.6+7.9s
[4800/15600]	[L1: 20.2846]	[L1: 31.3013]	25.7+13.3s
[6400/15600]	[L1: 20.2891]	[L1: 31.2603]	25.6+14.7s
[8000/15600]	[L1: 20.1681]	[L1: 31.2302]	25.6+4.4s
[9600/15600]	[L1: 20.2059]	[L1: 31.3510]	25.6+6.0s
[11200/15600]	[L1: 20.2529]	[L1: 31.3473]	25.7+8.2s
[12800/15600]	[L1: 20.2720]	[L1: 31.3759]	25.6+8.9s
[14400/15600]	[L1: 20.1993]	[L1: 31.3005]	25.6+9.1s

Evaluation:
[SRRAW x4]	PSNR: 20.255 (Best: 20.255 @epoch 4)
Forward: 3.30s

Saving...
Total: 5.70s

[Epoch 5]	Learning rate: 1.00e-4
[1600/15600]	[L1: 20.0767]	[L1: 30.8950]	25.6+5.7s
[3200/15600]	[L1: 20.1249]	[L1: 31.0780]	26.1+12.8s
[4800/15600]	[L1: 20.0579]	[L1: 30.9669]	25.6+8.3s
[6400/15600]	[L1: 20.0433]	[L1: 30.9881]	25.8+5.2s
[8000/15600]	[L1: 20.1357]	[L1: 31.0199]	25.8+14.3s
[9600/15600]	[L1: 20.0357]	[L1: 30.9090]	25.7+15.2s
[11200/15600]	[L1: 20.1332]	[L1: 30.9948]	25.9+11.7s
[12800/15600]	[L1: 20.1324]	[L1: 30.9904]	26.3+6.9s
[14400/15600]	[L1: 20.0764]	[L1: 30.9393]	25.8+17.7s

Evaluation:
[SRRAW x4]	PSNR: 19.802 (Best: 20.255 @epoch 4)
Forward: 3.48s

Saving...
Total: 5.91s

[Epoch 6]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.8418]	[L1: 30.8610]	25.7+15.4s
[3200/15600]	[L1: 19.8048]	[L1: 30.3591]	25.6+13.2s
[4800/15600]	[L1: 19.7481]	[L1: 30.5284]	25.6+12.4s
[6400/15600]	[L1: 19.8185]	[L1: 30.5839]	25.8+15.4s
[8000/15600]	[L1: 19.8586]	[L1: 30.5579]	25.7+12.4s
[9600/15600]	[L1: 19.7810]	[L1: 30.5060]	25.6+11.3s
[11200/15600]	[L1: 19.7954]	[L1: 30.5037]	25.6+13.2s
[12800/15600]	[L1: 19.8416]	[L1: 30.5572]	25.7+10.7s
[14400/15600]	[L1: 19.7690]	[L1: 30.5243]	25.9+12.1s

Evaluation:
[SRRAW x4]	PSNR: 20.389 (Best: 20.389 @epoch 6)
Forward: 3.53s

Saving...
Total: 7.04s

[Epoch 7]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.5852]	[L1: 30.5009]	25.9+16.8s
[3200/15600]	[L1: 19.6847]	[L1: 30.5749]	25.6+8.8s
[4800/15600]	[L1: 19.4855]	[L1: 30.3505]	25.6+16.8s
[6400/15600]	[L1: 19.6148]	[L1: 30.4422]	25.6+10.5s
[8000/15600]	[L1: 19.6791]	[L1: 30.5634]	25.6+17.1s
[9600/15600]	[L1: 19.7158]	[L1: 30.5110]	25.6+11.7s
[11200/15600]	[L1: 19.6580]	[L1: 30.4518]	25.6+10.9s
[12800/15600]	[L1: 19.7273]	[L1: 30.5494]	25.6+6.5s
[14400/15600]	[L1: 19.7110]	[L1: 30.4847]	25.9+11.2s

Evaluation:
[SRRAW x4]	PSNR: 20.283 (Best: 20.389 @epoch 6)
Forward: 4.02s

Saving...
Total: 6.57s

[Epoch 8]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.5919]	[L1: 30.4981]	25.6+10.7s
[3200/15600]	[L1: 19.5917]	[L1: 30.4572]	25.6+8.6s
[4800/15600]	[L1: 19.4614]	[L1: 30.3196]	25.6+15.8s
[6400/15600]	[L1: 19.3559]	[L1: 30.2215]	25.8+12.8s
[8000/15600]	[L1: 19.4306]	[L1: 30.2149]	26.2+10.7s
[9600/15600]	[L1: 19.4371]	[L1: 30.2743]	26.0+10.8s
[11200/15600]	[L1: 19.4383]	[L1: 30.2285]	25.6+10.5s
[12800/15600]	[L1: 19.3996]	[L1: 30.2025]	25.6+10.8s
[14400/15600]	[L1: 19.5154]	[L1: 30.3006]	25.6+12.2s

Evaluation:
[SRRAW x4]	PSNR: 20.168 (Best: 20.389 @epoch 6)
Forward: 3.36s

Saving...
Total: 5.90s

[Epoch 9]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.0642]	[L1: 29.4316]	25.7+15.0s
[3200/15600]	[L1: 19.1662]	[L1: 29.6891]	26.0+8.8s
[4800/15600]	[L1: 19.1760]	[L1: 29.9505]	25.6+12.4s
[6400/15600]	[L1: 19.1881]	[L1: 29.9258]	25.6+8.8s
[8000/15600]	[L1: 19.1500]	[L1: 29.9422]	25.7+8.5s
[9600/15600]	[L1: 19.1535]	[L1: 29.9474]	25.5+5.8s
[11200/15600]	[L1: 19.1604]	[L1: 29.9832]	25.5+7.6s
[12800/15600]	[L1: 19.1808]	[L1: 29.9828]	25.6+8.2s
[14400/15600]	[L1: 19.2172]	[L1: 30.0516]	25.7+9.6s

Evaluation:
[SRRAW x4]	PSNR: 19.452 (Best: 20.389 @epoch 6)
Forward: 3.82s

Saving...
Total: 6.37s

[Epoch 10]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.9971]	[L1: 29.8535]	25.5+19.5s
[3200/15600]	[L1: 19.0823]	[L1: 30.0814]	25.4+8.8s
[4800/15600]	[L1: 19.1873]	[L1: 30.1416]	25.6+11.5s
[6400/15600]	[L1: 19.0830]	[L1: 30.0358]	25.6+12.9s
[8000/15600]	[L1: 19.0863]	[L1: 30.0515]	25.6+11.7s
[9600/15600]	[L1: 19.0689]	[L1: 30.0194]	25.7+8.4s
[11200/15600]	[L1: 19.1114]	[L1: 30.0682]	25.6+8.7s
[12800/15600]	[L1: 19.1678]	[L1: 30.0955]	25.6+16.8s
[14400/15600]	[L1: 19.1429]	[L1: 30.0438]	25.6+6.9s

Evaluation:
[SRRAW x4]	PSNR: 20.308 (Best: 20.389 @epoch 6)
Forward: 3.24s

Saving...
Total: 5.84s

[Epoch 11]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.1644]	[L1: 29.9724]	25.5+17.9s
[3200/15600]	[L1: 19.0383]	[L1: 29.8032]	25.5+14.2s
[4800/15600]	[L1: 19.0514]	[L1: 29.8850]	25.8+17.5s
[6400/15600]	[L1: 19.0146]	[L1: 29.8495]	25.9+9.6s
[8000/15600]	[L1: 19.0587]	[L1: 29.9051]	26.1+16.4s
[9600/15600]	[L1: 19.0085]	[L1: 29.8721]	26.2+13.2s
[11200/15600]	[L1: 19.0341]	[L1: 29.9479]	26.4+2.9s
[12800/15600]	[L1: 18.9964]	[L1: 29.9607]	25.9+13.7s
[14400/15600]	[L1: 18.9701]	[L1: 29.9685]	25.6+10.2s

Evaluation:
[SRRAW x4]	PSNR: 19.906 (Best: 20.389 @epoch 6)
Forward: 4.26s

Saving...
Total: 6.81s

[Epoch 12]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.5780]	[L1: 29.0536]	25.5+14.0s
[3200/15600]	[L1: 18.6030]	[L1: 29.0523]	25.6+7.7s
[4800/15600]	[L1: 18.8885]	[L1: 29.3924]	25.6+14.9s
[6400/15600]	[L1: 18.8040]	[L1: 29.4203]	25.6+8.6s
[8000/15600]	[L1: 18.8519]	[L1: 29.5764]	25.6+8.5s
[9600/15600]	[L1: 18.8298]	[L1: 29.5923]	25.5+12.4s
[11200/15600]	[L1: 18.8121]	[L1: 29.6247]	25.4+13.0s
[12800/15600]	[L1: 18.8180]	[L1: 29.6346]	25.7+10.7s
[14400/15600]	[L1: 18.8087]	[L1: 29.7142]	26.0+11.1s

Evaluation:
[SRRAW x4]	PSNR: 20.287 (Best: 20.389 @epoch 6)
Forward: 3.45s

Saving...
Total: 5.96s

[Epoch 13]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.8330]	[L1: 29.5258]	26.1+12.1s
[3200/15600]	[L1: 18.7866]	[L1: 29.5599]	26.1+13.4s
[4800/15600]	[L1: 18.6789]	[L1: 29.4724]	25.6+15.3s
[6400/15600]	[L1: 18.6737]	[L1: 29.5276]	25.6+6.5s
[8000/15600]	[L1: 18.7273]	[L1: 29.6234]	25.7+16.0s
[9600/15600]	[L1: 18.7316]	[L1: 29.6363]	26.1+15.4s
[11200/15600]	[L1: 18.6587]	[L1: 29.6240]	25.8+10.9s
[12800/15600]	[L1: 18.6861]	[L1: 29.6523]	25.6+13.6s
[14400/15600]	[L1: 18.6176]	[L1: 29.5940]	25.6+11.0s

Evaluation:
[SRRAW x4]	PSNR: 20.924 (Best: 20.924 @epoch 13)
Forward: 3.78s

Saving...
Total: 6.32s

[Epoch 14]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.6074]	[L1: 29.3767]	25.5+14.4s
[3200/15600]	[L1: 18.6306]	[L1: 29.3805]	25.5+6.8s
[4800/15600]	[L1: 18.5250]	[L1: 29.3539]	25.6+11.6s
[6400/15600]	[L1: 18.4737]	[L1: 29.4607]	25.6+11.7s
[8000/15600]	[L1: 18.5106]	[L1: 29.5114]	25.5+6.5s
[9600/15600]	[L1: 18.5912]	[L1: 29.4984]	25.7+15.8s
[11200/15600]	[L1: 18.6147]	[L1: 29.4985]	25.6+10.6s
[12800/15600]	[L1: 18.6945]	[L1: 29.5167]	25.6+13.0s
[14400/15600]	[L1: 18.6688]	[L1: 29.5176]	25.6+9.7s

Evaluation:
[SRRAW x4]	PSNR: 19.591 (Best: 20.924 @epoch 13)
Forward: 3.06s

Saving...
Total: 5.42s

[Epoch 15]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.3708]	[L1: 28.9644]	25.6+18.6s
[3200/15600]	[L1: 18.4142]	[L1: 29.0654]	25.6+14.0s
[4800/15600]	[L1: 18.4479]	[L1: 29.2790]	25.5+10.3s
[6400/15600]	[L1: 18.5289]	[L1: 29.3975]	25.6+12.5s
[8000/15600]	[L1: 18.4670]	[L1: 29.3384]	25.5+8.0s
[9600/15600]	[L1: 18.4791]	[L1: 29.4075]	25.5+8.3s
[11200/15600]	[L1: 18.4547]	[L1: 29.3000]	25.6+10.5s
[12800/15600]	[L1: 18.4196]	[L1: 29.2700]	25.5+11.8s
[14400/15600]	[L1: 18.4371]	[L1: 29.2675]	25.5+9.2s

Evaluation:
[SRRAW x4]	PSNR: 20.292 (Best: 20.924 @epoch 13)
Forward: 3.54s

Saving...
Total: 6.07s

[Epoch 16]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.2748]	[L1: 29.4532]	25.6+10.4s
[3200/15600]	[L1: 18.3014]	[L1: 29.4794]	25.6+11.2s
[4800/15600]	[L1: 18.3743]	[L1: 29.5344]	25.6+9.8s
[6400/15600]	[L1: 18.3154]	[L1: 29.4211]	25.5+13.8s
[8000/15600]	[L1: 18.2981]	[L1: 29.3512]	25.6+7.1s
[9600/15600]	[L1: 18.2943]	[L1: 29.3090]	25.6+11.2s
[11200/15600]	[L1: 18.3314]	[L1: 29.2991]	25.6+15.0s
[12800/15600]	[L1: 18.3032]	[L1: 29.2551]	25.6+10.0s
[14400/15600]	[L1: 18.3365]	[L1: 29.2885]	25.5+11.6s

Evaluation:
[SRRAW x4]	PSNR: 20.282 (Best: 20.924 @epoch 13)
Forward: 3.29s

Saving...
Total: 5.79s

[Epoch 17]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.9275]	[L1: 28.8811]	25.5+16.6s
[3200/15600]	[L1: 18.1555]	[L1: 29.0603]	25.5+10.7s
[4800/15600]	[L1: 18.2120]	[L1: 29.2080]	25.5+13.4s
[6400/15600]	[L1: 18.2426]	[L1: 29.2881]	25.5+12.6s
[8000/15600]	[L1: 18.1861]	[L1: 29.3266]	25.5+15.9s
[9600/15600]	[L1: 18.0893]	[L1: 29.2581]	25.6+6.3s
[11200/15600]	[L1: 18.1111]	[L1: 29.2316]	25.6+18.6s
[12800/15600]	[L1: 18.1196]	[L1: 29.1930]	25.5+14.4s
[14400/15600]	[L1: 18.1504]	[L1: 29.2017]	25.5+10.7s

Evaluation:
[SRRAW x4]	PSNR: 20.917 (Best: 20.924 @epoch 13)
Forward: 4.13s

Saving...
Total: 6.54s

[Epoch 18]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.9567]	[L1: 28.8177]	25.6+15.6s
[3200/15600]	[L1: 17.8772]	[L1: 29.1412]	25.4+9.9s
[4800/15600]	[L1: 17.8467]	[L1: 29.0302]	25.5+20.6s
[6400/15600]	[L1: 17.9855]	[L1: 29.0988]	25.5+11.3s
[8000/15600]	[L1: 17.9190]	[L1: 29.0853]	25.5+16.5s
[9600/15600]	[L1: 18.0564]	[L1: 29.1498]	25.5+9.0s
[11200/15600]	[L1: 18.0490]	[L1: 29.1826]	25.5+9.5s
[12800/15600]	[L1: 18.1057]	[L1: 29.2392]	25.5+16.5s
[14400/15600]	[L1: 18.1119]	[L1: 29.2110]	25.6+10.3s

Evaluation:
[SRRAW x4]	PSNR: 21.073 (Best: 21.073 @epoch 18)
Forward: 3.19s

Saving...
Total: 5.70s

[Epoch 19]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.1693]	[L1: 29.2651]	25.5+22.1s
[3200/15600]	[L1: 18.0437]	[L1: 29.4006]	25.5+7.2s
[4800/15600]	[L1: 18.0635]	[L1: 29.3456]	25.5+13.8s
[6400/15600]	[L1: 18.1193]	[L1: 29.3752]	25.5+11.6s
[8000/15600]	[L1: 18.1399]	[L1: 29.3640]	25.5+12.5s
[9600/15600]	[L1: 18.1360]	[L1: 29.3410]	25.5+4.5s
[11200/15600]	[L1: 18.1586]	[L1: 29.3415]	25.5+8.9s
[12800/15600]	[L1: 18.1908]	[L1: 29.3566]	25.5+14.2s
[14400/15600]	[L1: 18.2051]	[L1: 29.3316]	25.5+12.0s

Evaluation:
[SRRAW x4]	PSNR: 20.588 (Best: 21.073 @epoch 18)
Forward: 4.19s

Saving...
Total: 6.70s

[Epoch 20]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.0573]	[L1: 29.0853]	25.5+15.0s
[3200/15600]	[L1: 18.1295]	[L1: 29.3238]	25.6+15.8s
[4800/15600]	[L1: 18.0661]	[L1: 29.2545]	25.5+14.0s
[6400/15600]	[L1: 18.0559]	[L1: 29.2075]	25.5+15.6s
[8000/15600]	[L1: 18.0929]	[L1: 29.1667]	25.6+6.7s
[9600/15600]	[L1: 18.1294]	[L1: 29.2675]	25.5+12.1s
[11200/15600]	[L1: 18.0711]	[L1: 29.1678]	25.5+15.7s
[12800/15600]	[L1: 18.0221]	[L1: 29.1250]	25.5+14.1s
[14400/15600]	[L1: 18.0246]	[L1: 29.0855]	25.5+12.3s

Evaluation:
[SRRAW x4]	PSNR: 21.612 (Best: 21.612 @epoch 20)
Forward: 3.39s

Saving...
Total: 5.96s

[Epoch 21]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.9359]	[L1: 28.8464]	25.6+16.7s
[3200/15600]	[L1: 18.0326]	[L1: 29.0177]	25.5+13.6s
[4800/15600]	[L1: 17.9825]	[L1: 28.9496]	25.5+14.8s
[6400/15600]	[L1: 18.0640]	[L1: 28.9547]	25.5+7.8s
[8000/15600]	[L1: 18.0224]	[L1: 28.8476]	25.5+11.5s
[9600/15600]	[L1: 18.0940]	[L1: 28.9311]	25.5+8.6s
[11200/15600]	[L1: 18.0226]	[L1: 28.8941]	25.5+12.0s
[12800/15600]	[L1: 17.9560]	[L1: 28.8952]	25.5+13.7s
[14400/15600]	[L1: 17.9100]	[L1: 28.8478]	25.5+10.6s

Evaluation:
[SRRAW x4]	PSNR: 20.272 (Best: 21.612 @epoch 20)
Forward: 3.88s

Saving...
Total: 6.26s

[Epoch 22]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.6599]	[L1: 28.9869]	25.6+15.2s
[3200/15600]	[L1: 17.5807]	[L1: 28.8740]	25.5+6.6s
[4800/15600]	[L1: 17.5022]	[L1: 28.8304]	25.5+8.7s
[6400/15600]	[L1: 17.5875]	[L1: 28.8562]	25.5+11.6s
[8000/15600]	[L1: 17.6434]	[L1: 28.9506]	25.5+15.6s
[9600/15600]	[L1: 17.6746]	[L1: 28.9874]	25.5+14.6s
[11200/15600]	[L1: 17.7030]	[L1: 28.9965]	25.6+12.2s
[12800/15600]	[L1: 17.6338]	[L1: 28.9164]	25.6+12.7s
[14400/15600]	[L1: 17.6513]	[L1: 28.9593]	25.6+11.2s

Evaluation:
[SRRAW x4]	PSNR: 20.727 (Best: 21.612 @epoch 20)
Forward: 3.26s

Saving...
Total: 6.63s

[Epoch 23]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.5642]	[L1: 28.4867]	25.5+10.4s
[3200/15600]	[L1: 17.8186]	[L1: 28.7804]	25.5+12.1s
[4800/15600]	[L1: 17.6478]	[L1: 28.6627]	25.6+16.9s
[6400/15600]	[L1: 17.7252]	[L1: 28.7286]	25.5+9.4s
[8000/15600]	[L1: 17.7050]	[L1: 28.7482]	25.5+14.1s
[9600/15600]	[L1: 17.7249]	[L1: 28.7496]	25.5+11.0s
[11200/15600]	[L1: 17.7900]	[L1: 28.8064]	25.5+13.0s
[12800/15600]	[L1: 17.8519]	[L1: 28.8484]	25.7+11.1s
[14400/15600]	[L1: 17.8204]	[L1: 28.8656]	25.5+5.6s

Evaluation:
[SRRAW x4]	PSNR: 20.347 (Best: 21.612 @epoch 20)
Forward: 3.80s

Saving...
Total: 6.39s

