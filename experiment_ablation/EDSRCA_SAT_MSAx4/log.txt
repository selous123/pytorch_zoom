add self supervised for edsr with spatial attention
EDSR_Zoom(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (model_ssl): EDSR_SSL(
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (body): Sequential(
      (0): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (1): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (2): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (3): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (4): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (5): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (6): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (7): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (8): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (9): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (10): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (11): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (12): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (13): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (14): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (15): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (tail): Sequential(
      (0): Upsampler(
        (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
        (2): ReLU(inplace)
        (3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): PixelShuffle(upscale_factor=2)
        (5): ReLU(inplace)
      )
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (CALayer_head): MixAttn(
    (attn1): CALayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (conv_du): Sequential(
        (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
        (3): Sigmoid()
      )
    )
    (attn2): MultiPoolingSpatialAttn(
      (compress1): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=1)
        (avgpool): AdaptiveAvgPool1d(output_size=1)
      )
      (compress2): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=2)
        (avgpool): AdaptiveAvgPool1d(output_size=2)
      )
      (compress3): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=4)
        (avgpool): AdaptiveAvgPool1d(output_size=4)
      )
      (spatial1): BasicConv(
        (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial2): BasicConv(
        (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial3): BasicConv(
        (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
  )
  (CALayer_tail): MixAttn(
    (attn1): CALayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (conv_du): Sequential(
        (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
        (3): Sigmoid()
      )
    )
    (attn2): MultiPoolingSpatialAttn(
      (compress1): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=1)
        (avgpool): AdaptiveAvgPool1d(output_size=1)
      )
      (compress2): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=2)
        (avgpool): AdaptiveAvgPool1d(output_size=2)
      )
      (compress3): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=4)
        (avgpool): AdaptiveAvgPool1d(output_size=4)
      )
      (spatial1): BasicConv(
        (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial2): BasicConv(
        (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial3): BasicConv(
        (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
  )
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (1): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (2): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (3): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (4): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (5): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (6): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (7): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (8): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (9): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (10): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (11): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (12): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (13): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (14): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (15): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): ReLU(inplace)
      (3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): PixelShuffle(upscale_factor=2)
      (5): ReLU(inplace)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/15600]	[L1: 33.7873]	[L1: 44.1023]	57.8+3.1s
[3200/15600]	[L1: 29.1908]	[L1: 39.4097]	56.4+2.6s
[4800/15600]	[L1: 27.3676]	[L1: 37.4561]	55.8+0.2s
[6400/15600]	[L1: 26.3389]	[L1: 36.4296]	55.4+0.3s
[8000/15600]	[L1: 25.6743]	[L1: 35.8251]	55.5+0.2s
[9600/15600]	[L1: 25.1128]	[L1: 35.2240]	55.4+0.2s
[11200/15600]	[L1: 24.7181]	[L1: 34.9400]	55.5+0.2s
[12800/15600]	[L1: 24.3975]	[L1: 34.5843]	55.4+0.2s
[14400/15600]	[L1: 24.1214]	[L1: 34.3510]	55.5+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.064 (Best: 19.064 @epoch 1)
Forward: 5.17s

Saving...
Total: 6.83s

[Epoch 2]	Learning rate: 1.00e-4
[1600/15600]	[L1: 21.2986]	[L1: 31.9593]	55.3+2.1s
[3200/15600]	[L1: 21.2361]	[L1: 31.6898]	55.1+0.2s
add self supervised for edsr with spatial attention
EDSR_Zoom(
  (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
  (model_ssl): EDSR_SSL(
    (sub_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (add_mean): MeanShift(3, 3, kernel_size=(1, 1), stride=(1, 1))
    (head): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (body): Sequential(
      (0): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (1): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (2): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (3): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (4): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (5): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (6): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (7): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (8): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (9): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (10): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (11): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (12): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (13): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (14): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (15): RCABlock(
        (body): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): ReLU(inplace)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): MixAttn(
            (attn1): CALayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (conv_du): Sequential(
                (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
                (1): ReLU(inplace)
                (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
                (3): Sigmoid()
              )
            )
            (attn2): MultiPoolingSpatialAttn(
              (compress1): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=1)
                (avgpool): AdaptiveAvgPool1d(output_size=1)
              )
              (compress2): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=2)
                (avgpool): AdaptiveAvgPool1d(output_size=2)
              )
              (compress3): ChannelPool(
                (maxpool): AdaptiveMaxPool1d(output_size=4)
                (avgpool): AdaptiveAvgPool1d(output_size=4)
              )
              (spatial1): BasicConv(
                (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial2): BasicConv(
                (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
              (spatial3): BasicConv(
                (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
                (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (tail): Sequential(
      (0): Upsampler(
        (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): PixelShuffle(upscale_factor=2)
        (2): ReLU(inplace)
        (3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): PixelShuffle(upscale_factor=2)
        (5): ReLU(inplace)
      )
      (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (CALayer_head): MixAttn(
    (attn1): CALayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (conv_du): Sequential(
        (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
        (3): Sigmoid()
      )
    )
    (attn2): MultiPoolingSpatialAttn(
      (compress1): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=1)
        (avgpool): AdaptiveAvgPool1d(output_size=1)
      )
      (compress2): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=2)
        (avgpool): AdaptiveAvgPool1d(output_size=2)
      )
      (compress3): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=4)
        (avgpool): AdaptiveAvgPool1d(output_size=4)
      )
      (spatial1): BasicConv(
        (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial2): BasicConv(
        (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial3): BasicConv(
        (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
  )
  (CALayer_tail): MixAttn(
    (attn1): CALayer(
      (avg_pool): AdaptiveAvgPool2d(output_size=1)
      (conv_du): Sequential(
        (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
        (3): Sigmoid()
      )
    )
    (attn2): MultiPoolingSpatialAttn(
      (compress1): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=1)
        (avgpool): AdaptiveAvgPool1d(output_size=1)
      )
      (compress2): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=2)
        (avgpool): AdaptiveAvgPool1d(output_size=2)
      )
      (compress3): ChannelPool(
        (maxpool): AdaptiveMaxPool1d(output_size=4)
        (avgpool): AdaptiveAvgPool1d(output_size=4)
      )
      (spatial1): BasicConv(
        (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial2): BasicConv(
        (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
      (spatial3): BasicConv(
        (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
        (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
  )
  (head): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (body): Sequential(
    (0): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (1): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (2): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (3): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (4): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (5): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (6): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (7): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (8): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (9): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (10): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (11): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (12): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (13): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (14): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (15): RCABlock(
      (body): Sequential(
        (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace)
        (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): MixAttn(
          (attn1): CALayer(
            (avg_pool): AdaptiveAvgPool2d(output_size=1)
            (conv_du): Sequential(
              (0): Conv2d(64, 4, kernel_size=(1, 1), stride=(1, 1))
              (1): ReLU(inplace)
              (2): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1))
              (3): Sigmoid()
            )
          )
          (attn2): MultiPoolingSpatialAttn(
            (compress1): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=1)
              (avgpool): AdaptiveAvgPool1d(output_size=1)
            )
            (compress2): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=2)
              (avgpool): AdaptiveAvgPool1d(output_size=2)
            )
            (compress3): ChannelPool(
              (maxpool): AdaptiveMaxPool1d(output_size=4)
              (avgpool): AdaptiveAvgPool1d(output_size=4)
            )
            (spatial1): BasicConv(
              (conv): Conv2d(4, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial2): BasicConv(
              (conv): Conv2d(8, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
            (spatial3): BasicConv(
              (conv): Conv2d(16, 8, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
              (bn): BatchNorm2d(8, eps=1e-05, momentum=0.01, affine=True, track_running_stats=True)
            )
          )
        )
      )
    )
    (16): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PixelShuffle(upscale_factor=2)
      (2): ReLU(inplace)
      (3): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): PixelShuffle(upscale_factor=2)
      (5): ReLU(inplace)
    )
    (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/15600]	[L1: 34.3526]	[L1: 44.5076]	56.4+1.0s
[3200/15600]	[L1: 29.4001]	[L1: 39.5503]	55.3+0.4s
[4800/15600]	[L1: 27.5597]	[L1: 37.6396]	55.5+0.2s
[6400/15600]	[L1: 26.4572]	[L1: 36.3054]	55.4+0.2s
[8000/15600]	[L1: 25.8407]	[L1: 35.5684]	55.2+0.3s
[9600/15600]	[L1: 25.2202]	[L1: 34.9908]	55.2+0.2s
[11200/15600]	[L1: 24.8235]	[L1: 34.7395]	55.4+0.2s
[12800/15600]	[L1: 24.5133]	[L1: 34.4870]	55.4+0.2s
[14400/15600]	[L1: 24.2288]	[L1: 34.2910]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.425 (Best: 19.425 @epoch 1)
Forward: 5.22s

Saving...
Total: 6.75s

[Epoch 2]	Learning rate: 1.00e-4
[1600/15600]	[L1: 21.4781]	[L1: 32.7680]	55.0+2.2s
[3200/15600]	[L1: 21.2601]	[L1: 32.0872]	55.1+0.2s
[4800/15600]	[L1: 21.2038]	[L1: 32.0795]	55.0+0.2s
[6400/15600]	[L1: 21.1743]	[L1: 32.1025]	55.0+0.2s
[8000/15600]	[L1: 21.1964]	[L1: 32.1154]	54.9+0.2s
[9600/15600]	[L1: 21.2142]	[L1: 32.0594]	55.0+0.2s
[11200/15600]	[L1: 21.1959]	[L1: 31.9881]	54.8+0.2s
[12800/15600]	[L1: 21.1097]	[L1: 31.8886]	55.5+0.2s
[14400/15600]	[L1: 21.0445]	[L1: 31.8779]	55.5+0.2s

Evaluation:
[SRRAW x4]	PSNR: 18.641 (Best: 19.425 @epoch 1)
Forward: 3.94s

Saving...
Total: 6.30s

[Epoch 3]	Learning rate: 1.00e-4
[1600/15600]	[L1: 20.0959]	[L1: 31.2249]	56.2+2.6s
[3200/15600]	[L1: 20.3021]	[L1: 31.4903]	54.9+0.2s
[4800/15600]	[L1: 20.4036]	[L1: 31.6728]	54.9+0.2s
[6400/15600]	[L1: 20.5723]	[L1: 31.7674]	55.0+0.2s
[8000/15600]	[L1: 20.5413]	[L1: 31.7846]	55.0+0.2s
[9600/15600]	[L1: 20.5882]	[L1: 31.8213]	55.2+0.2s
[11200/15600]	[L1: 20.5533]	[L1: 31.8257]	55.8+0.2s
[12800/15600]	[L1: 20.5674]	[L1: 31.8145]	55.1+0.2s
[14400/15600]	[L1: 20.5182]	[L1: 31.7946]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.315 (Best: 20.315 @epoch 3)
Forward: 4.75s

Saving...
Total: 6.23s

[Epoch 4]	Learning rate: 1.00e-4
[1600/15600]	[L1: 20.4305]	[L1: 31.6168]	55.2+3.7s
[3200/15600]	[L1: 20.0669]	[L1: 31.2262]	55.1+0.2s
[4800/15600]	[L1: 20.0600]	[L1: 31.1738]	55.0+0.2s
[6400/15600]	[L1: 20.2145]	[L1: 31.2216]	55.1+0.2s
[8000/15600]	[L1: 20.2022]	[L1: 31.1454]	55.9+0.2s
[9600/15600]	[L1: 20.1869]	[L1: 31.1012]	56.0+0.2s
[11200/15600]	[L1: 20.2411]	[L1: 31.1522]	56.1+0.2s
[12800/15600]	[L1: 20.1899]	[L1: 31.1024]	55.4+0.2s
[14400/15600]	[L1: 20.1944]	[L1: 31.1021]	56.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.702 (Best: 20.315 @epoch 3)
Forward: 4.62s

Saving...
Total: 6.11s

[Epoch 5]	Learning rate: 1.00e-4
[1600/15600]	[L1: 20.1841]	[L1: 31.1500]	56.3+2.7s
[3200/15600]	[L1: 19.9862]	[L1: 30.8951]	55.6+0.2s
[4800/15600]	[L1: 20.1391]	[L1: 30.9404]	55.1+0.2s
[6400/15600]	[L1: 20.2021]	[L1: 30.9268]	55.0+0.2s
[8000/15600]	[L1: 20.1936]	[L1: 30.9314]	55.0+0.2s
[9600/15600]	[L1: 20.1523]	[L1: 30.9302]	55.1+0.2s
[11200/15600]	[L1: 20.0701]	[L1: 30.8804]	55.0+0.2s
[12800/15600]	[L1: 20.0389]	[L1: 30.8337]	54.9+0.2s
[14400/15600]	[L1: 19.9657]	[L1: 30.7577]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.475 (Best: 20.475 @epoch 5)
Forward: 4.09s

Saving...
Total: 6.76s

[Epoch 6]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.9748]	[L1: 30.6858]	55.2+1.8s
[3200/15600]	[L1: 20.0484]	[L1: 30.6229]	55.1+0.2s
[4800/15600]	[L1: 20.0385]	[L1: 30.5842]	55.0+0.2s
[6400/15600]	[L1: 19.8901]	[L1: 30.5728]	56.2+0.2s
[8000/15600]	[L1: 19.8322]	[L1: 30.5726]	55.2+0.2s
[9600/15600]	[L1: 19.8201]	[L1: 30.5274]	55.1+0.2s
[11200/15600]	[L1: 19.7617]	[L1: 30.5162]	54.8+0.2s
[12800/15600]	[L1: 19.7531]	[L1: 30.5607]	54.9+0.2s
[14400/15600]	[L1: 19.7565]	[L1: 30.5712]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.313 (Best: 20.475 @epoch 5)
Forward: 4.84s

Saving...
Total: 6.27s

[Epoch 7]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.1094]	[L1: 30.4809]	55.2+4.0s
[3200/15600]	[L1: 19.5554]	[L1: 30.2694]	55.1+0.2s
[4800/15600]	[L1: 19.5924]	[L1: 30.4430]	55.1+0.2s
[6400/15600]	[L1: 19.5644]	[L1: 30.3456]	55.1+0.2s
[8000/15600]	[L1: 19.5709]	[L1: 30.4386]	55.1+0.2s
[9600/15600]	[L1: 19.6607]	[L1: 30.4445]	55.3+0.2s
[11200/15600]	[L1: 19.6949]	[L1: 30.4413]	54.9+0.2s
[12800/15600]	[L1: 19.6944]	[L1: 30.4056]	55.0+0.2s
[14400/15600]	[L1: 19.6812]	[L1: 30.4369]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.441 (Best: 20.475 @epoch 5)
Forward: 5.15s

Saving...
Total: 6.67s

[Epoch 8]	Learning rate: 1.00e-4
[1600/15600]	[L1: 20.1795]	[L1: 30.7830]	55.4+3.2s
[3200/15600]	[L1: 19.6046]	[L1: 30.3237]	55.0+0.2s
[4800/15600]	[L1: 19.4435]	[L1: 30.1531]	55.0+0.2s
[6400/15600]	[L1: 19.4372]	[L1: 30.1372]	55.2+0.2s
[8000/15600]	[L1: 19.3737]	[L1: 30.0355]	55.0+0.2s
[9600/15600]	[L1: 19.3805]	[L1: 30.0082]	55.5+0.2s
[11200/15600]	[L1: 19.3208]	[L1: 30.0170]	54.8+0.2s
[12800/15600]	[L1: 19.3399]	[L1: 30.0093]	54.8+0.2s
[14400/15600]	[L1: 19.3574]	[L1: 30.0079]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.438 (Best: 20.475 @epoch 5)
Forward: 4.34s

Saving...
Total: 6.89s

[Epoch 9]	Learning rate: 1.00e-4
[1600/15600]	[L1: 19.2134]	[L1: 29.7616]	55.4+2.2s
[3200/15600]	[L1: 19.3555]	[L1: 29.9287]	55.4+0.2s
[4800/15600]	[L1: 19.4018]	[L1: 30.1298]	55.4+0.2s
[6400/15600]	[L1: 19.4881]	[L1: 30.3603]	55.1+0.2s
[8000/15600]	[L1: 19.3759]	[L1: 30.1748]	55.0+0.2s
[9600/15600]	[L1: 19.3573]	[L1: 30.1265]	56.5+0.2s
[11200/15600]	[L1: 19.3735]	[L1: 30.1505]	55.1+0.2s
[12800/15600]	[L1: 19.3466]	[L1: 30.1476]	55.3+0.2s
[14400/15600]	[L1: 19.3171]	[L1: 30.0661]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.064 (Best: 21.064 @epoch 9)
Forward: 4.09s

Saving...
Total: 6.48s

[Epoch 10]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.7032]	[L1: 29.3900]	55.0+3.9s
[3200/15600]	[L1: 19.0569]	[L1: 29.7518]	55.2+0.2s
[4800/15600]	[L1: 19.2009]	[L1: 29.9422]	56.1+0.2s
[6400/15600]	[L1: 19.1531]	[L1: 29.9160]	55.1+0.2s
[8000/15600]	[L1: 19.1073]	[L1: 29.8301]	55.3+0.2s
[9600/15600]	[L1: 19.0811]	[L1: 29.8464]	54.8+0.2s
[11200/15600]	[L1: 19.1043]	[L1: 29.8538]	55.0+0.2s
[12800/15600]	[L1: 19.1218]	[L1: 29.8494]	55.0+0.2s
[14400/15600]	[L1: 19.1389]	[L1: 29.8308]	55.3+0.2s

Evaluation:
[SRRAW x4]	PSNR: 18.396 (Best: 21.064 @epoch 9)
Forward: 4.69s

Saving...
Total: 7.07s

[Epoch 11]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.5846]	[L1: 28.9445]	55.2+1.7s
[3200/15600]	[L1: 18.8317]	[L1: 29.1606]	55.4+0.2s
[4800/15600]	[L1: 18.8400]	[L1: 29.1466]	55.0+0.2s
[6400/15600]	[L1: 18.9487]	[L1: 29.3542]	55.0+0.2s
[8000/15600]	[L1: 19.0659]	[L1: 29.4719]	54.8+0.2s
[9600/15600]	[L1: 19.0338]	[L1: 29.5529]	55.0+1.0s
[11200/15600]	[L1: 18.9717]	[L1: 29.6095]	55.4+0.2s
[12800/15600]	[L1: 18.9580]	[L1: 29.5642]	55.1+0.2s
[14400/15600]	[L1: 19.0097]	[L1: 29.6519]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.758 (Best: 21.064 @epoch 9)
Forward: 4.48s

Saving...
Total: 6.96s

[Epoch 12]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.7066]	[L1: 29.5799]	55.9+1.2s
[3200/15600]	[L1: 18.6568]	[L1: 29.4728]	55.7+0.2s
[4800/15600]	[L1: 18.7227]	[L1: 29.3816]	55.0+0.2s
[6400/15600]	[L1: 18.8053]	[L1: 29.6162]	54.9+0.2s
[8000/15600]	[L1: 18.8675]	[L1: 29.6683]	55.0+0.2s
[9600/15600]	[L1: 18.9424]	[L1: 29.6801]	55.0+0.2s
[11200/15600]	[L1: 18.9508]	[L1: 29.7020]	55.0+0.2s
[12800/15600]	[L1: 19.0084]	[L1: 29.7183]	54.9+0.2s
[14400/15600]	[L1: 18.9365]	[L1: 29.6247]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.684 (Best: 21.064 @epoch 9)
Forward: 4.77s

Saving...
Total: 7.19s

[Epoch 13]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.8354]	[L1: 29.6458]	55.0+4.7s
[3200/15600]	[L1: 18.9561]	[L1: 29.6129]	54.9+0.2s
[4800/15600]	[L1: 18.7549]	[L1: 29.5480]	55.5+0.2s
[6400/15600]	[L1: 18.7828]	[L1: 29.5577]	54.9+0.2s
[8000/15600]	[L1: 18.7319]	[L1: 29.5853]	55.1+0.2s
[9600/15600]	[L1: 18.7532]	[L1: 29.5964]	55.0+0.2s
[11200/15600]	[L1: 18.6940]	[L1: 29.5052]	54.9+0.2s
[12800/15600]	[L1: 18.7060]	[L1: 29.5432]	54.9+0.2s
[14400/15600]	[L1: 18.7177]	[L1: 29.5555]	55.4+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.521 (Best: 21.064 @epoch 9)
Forward: 4.17s

Saving...
Total: 6.54s

[Epoch 14]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.6530]	[L1: 29.7420]	55.5+2.3s
[3200/15600]	[L1: 18.6791]	[L1: 29.8523]	55.4+0.2s
[4800/15600]	[L1: 18.6319]	[L1: 29.7701]	54.8+0.2s
[6400/15600]	[L1: 18.7218]	[L1: 29.7585]	55.3+0.2s
[8000/15600]	[L1: 18.6950]	[L1: 29.7084]	55.3+0.2s
[9600/15600]	[L1: 18.6410]	[L1: 29.5574]	55.0+0.2s
[11200/15600]	[L1: 18.6317]	[L1: 29.6267]	55.0+0.2s
[12800/15600]	[L1: 18.5864]	[L1: 29.5556]	55.4+0.2s
[14400/15600]	[L1: 18.5839]	[L1: 29.4838]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.886 (Best: 21.064 @epoch 9)
Forward: 4.63s

Saving...
Total: 7.05s

[Epoch 15]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.4720]	[L1: 29.3526]	55.1+2.8s
[3200/15600]	[L1: 18.3382]	[L1: 29.3576]	55.1+0.2s
[4800/15600]	[L1: 18.5487]	[L1: 29.4226]	55.3+0.2s
[6400/15600]	[L1: 18.6093]	[L1: 29.4145]	55.0+0.2s
[8000/15600]	[L1: 18.4841]	[L1: 29.3167]	55.0+0.2s
[9600/15600]	[L1: 18.5305]	[L1: 29.3411]	55.0+0.2s
[11200/15600]	[L1: 18.4968]	[L1: 29.2750]	55.0+0.2s
[12800/15600]	[L1: 18.4689]	[L1: 29.3038]	55.1+0.2s
[14400/15600]	[L1: 18.4999]	[L1: 29.2920]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.771 (Best: 21.064 @epoch 9)
Forward: 3.96s

Saving...
Total: 6.51s

[Epoch 16]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.1667]	[L1: 29.1390]	55.2+4.3s
[3200/15600]	[L1: 18.2444]	[L1: 29.0110]	55.0+0.2s
[4800/15600]	[L1: 18.1759]	[L1: 29.1338]	55.0+0.2s
[6400/15600]	[L1: 18.3023]	[L1: 29.2088]	55.0+0.2s
[8000/15600]	[L1: 18.2329]	[L1: 29.1454]	54.9+0.2s
[9600/15600]	[L1: 18.2897]	[L1: 29.1790]	54.9+0.2s
[11200/15600]	[L1: 18.3161]	[L1: 29.1893]	55.1+0.2s
[12800/15600]	[L1: 18.2494]	[L1: 29.1631]	55.0+0.2s
[14400/15600]	[L1: 18.2397]	[L1: 29.1175]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.797 (Best: 21.064 @epoch 9)
Forward: 4.58s

Saving...
Total: 7.01s

[Epoch 17]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.2382]	[L1: 29.2903]	55.3+4.5s
[3200/15600]	[L1: 18.2461]	[L1: 29.2057]	55.0+0.2s
[4800/15600]	[L1: 18.3339]	[L1: 29.3777]	55.0+0.2s
[6400/15600]	[L1: 18.2961]	[L1: 29.2064]	54.9+0.2s
[8000/15600]	[L1: 18.2007]	[L1: 29.1456]	55.0+0.2s
[9600/15600]	[L1: 18.1650]	[L1: 29.1078]	55.0+0.2s
[11200/15600]	[L1: 18.2258]	[L1: 29.1105]	55.1+0.2s
[12800/15600]	[L1: 18.2181]	[L1: 29.0920]	54.9+0.2s
[14400/15600]	[L1: 18.2216]	[L1: 29.1293]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.381 (Best: 21.064 @epoch 9)
Forward: 4.46s

Saving...
Total: 6.84s

[Epoch 18]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.1483]	[L1: 29.1928]	55.2+1.3s
[3200/15600]	[L1: 18.5566]	[L1: 29.6322]	54.9+0.2s
[4800/15600]	[L1: 18.5635]	[L1: 29.7011]	54.9+0.2s
[6400/15600]	[L1: 18.4809]	[L1: 29.5786]	54.8+0.2s
[8000/15600]	[L1: 18.3442]	[L1: 29.4209]	54.8+0.2s
[9600/15600]	[L1: 18.3252]	[L1: 29.3457]	55.2+0.2s
[11200/15600]	[L1: 18.2593]	[L1: 29.2267]	55.1+0.2s
[12800/15600]	[L1: 18.2685]	[L1: 29.2540]	54.9+0.2s
[14400/15600]	[L1: 18.2090]	[L1: 29.1846]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.723 (Best: 21.064 @epoch 9)
Forward: 4.51s

Saving...
Total: 6.92s

[Epoch 19]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.9228]	[L1: 28.9489]	55.1+3.0s
[3200/15600]	[L1: 17.9585]	[L1: 28.6926]	55.6+0.2s
[4800/15600]	[L1: 17.9644]	[L1: 28.8220]	55.4+0.2s
[6400/15600]	[L1: 17.8815]	[L1: 28.9218]	55.2+0.2s
[8000/15600]	[L1: 17.8562]	[L1: 28.8400]	55.1+0.2s
[9600/15600]	[L1: 17.9316]	[L1: 28.8652]	54.9+0.2s
[11200/15600]	[L1: 17.9782]	[L1: 28.9360]	54.9+0.2s
[12800/15600]	[L1: 17.9680]	[L1: 28.8878]	55.0+0.2s
[14400/15600]	[L1: 17.9829]	[L1: 28.8735]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 18.936 (Best: 21.064 @epoch 9)
Forward: 3.85s

Saving...
Total: 7.34s

[Epoch 20]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.9822]	[L1: 29.3396]	55.1+6.7s
[3200/15600]	[L1: 18.1323]	[L1: 29.1275]	55.0+0.2s
[4800/15600]	[L1: 18.0047]	[L1: 29.0227]	55.3+0.2s
[6400/15600]	[L1: 18.1033]	[L1: 29.0565]	55.1+0.2s
[8000/15600]	[L1: 18.0938]	[L1: 29.0314]	55.0+0.2s
[9600/15600]	[L1: 18.0202]	[L1: 28.9857]	55.1+0.2s
[11200/15600]	[L1: 17.9064]	[L1: 28.9036]	55.0+0.2s
[12800/15600]	[L1: 17.8786]	[L1: 28.9032]	54.8+0.2s
[14400/15600]	[L1: 17.8062]	[L1: 28.8320]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.023 (Best: 21.064 @epoch 9)
Forward: 4.65s

Saving...
Total: 7.18s

[Epoch 21]	Learning rate: 1.00e-4
[1600/15600]	[L1: 18.0135]	[L1: 29.3329]	55.2+2.3s
[3200/15600]	[L1: 17.9588]	[L1: 28.9903]	55.0+0.2s
[4800/15600]	[L1: 17.9489]	[L1: 28.9650]	55.1+0.2s
[6400/15600]	[L1: 17.8856]	[L1: 28.8677]	55.3+0.2s
[8000/15600]	[L1: 17.9491]	[L1: 28.9347]	55.7+0.2s
[9600/15600]	[L1: 17.9122]	[L1: 28.8984]	55.1+0.2s
[11200/15600]	[L1: 17.9744]	[L1: 28.9560]	55.0+0.2s
[12800/15600]	[L1: 17.9745]	[L1: 28.9298]	55.1+0.2s
[14400/15600]	[L1: 17.9782]	[L1: 28.9601]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.865 (Best: 21.064 @epoch 9)
Forward: 4.58s

Saving...
Total: 7.02s

[Epoch 22]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.8097]	[L1: 29.0888]	54.9+5.5s
[3200/15600]	[L1: 17.7577]	[L1: 28.9333]	54.8+0.2s
[4800/15600]	[L1: 17.8901]	[L1: 28.9540]	54.8+0.2s
[6400/15600]	[L1: 17.8692]	[L1: 29.0556]	54.9+0.2s
[8000/15600]	[L1: 17.8092]	[L1: 28.9907]	54.9+0.2s
[9600/15600]	[L1: 17.8805]	[L1: 29.0067]	54.8+0.2s
[11200/15600]	[L1: 17.9144]	[L1: 29.0363]	54.8+0.2s
[12800/15600]	[L1: 17.8683]	[L1: 28.9761]	54.8+0.2s
[14400/15600]	[L1: 17.8378]	[L1: 28.9196]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.782 (Best: 21.064 @epoch 9)
Forward: 4.90s

Saving...
Total: 7.41s

[Epoch 23]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.6003]	[L1: 28.7015]	55.1+4.4s
[3200/15600]	[L1: 17.6631]	[L1: 28.8192]	55.2+0.2s
[4800/15600]	[L1: 17.5867]	[L1: 28.4772]	54.9+0.2s
[6400/15600]	[L1: 17.5527]	[L1: 28.5765]	54.8+0.2s
[8000/15600]	[L1: 17.5804]	[L1: 28.7246]	54.8+0.2s
[9600/15600]	[L1: 17.6596]	[L1: 28.7264]	55.0+0.2s
[11200/15600]	[L1: 17.6249]	[L1: 28.6928]	54.9+0.2s
[12800/15600]	[L1: 17.6940]	[L1: 28.7239]	54.9+0.2s
[14400/15600]	[L1: 17.6962]	[L1: 28.7398]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.257 (Best: 21.257 @epoch 23)
Forward: 4.13s

Saving...
Total: 7.52s

[Epoch 24]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.6799]	[L1: 28.6174]	55.3+3.3s
[3200/15600]	[L1: 17.7442]	[L1: 28.8912]	55.1+0.2s
[4800/15600]	[L1: 17.7667]	[L1: 28.9495]	55.1+0.2s
[6400/15600]	[L1: 17.7019]	[L1: 28.8004]	55.3+0.2s
[8000/15600]	[L1: 17.6514]	[L1: 28.7765]	55.1+0.2s
[9600/15600]	[L1: 17.7924]	[L1: 28.8621]	55.1+0.2s
[11200/15600]	[L1: 17.7307]	[L1: 28.8266]	55.0+0.2s
[12800/15600]	[L1: 17.7319]	[L1: 28.8442]	54.9+0.2s
[14400/15600]	[L1: 17.6848]	[L1: 28.8024]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.171 (Best: 22.171 @epoch 24)
Forward: 4.58s

Saving...
Total: 7.15s

[Epoch 25]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.4947]	[L1: 28.8144]	55.3+2.9s
[3200/15600]	[L1: 17.4286]	[L1: 28.2959]	55.3+0.2s
[4800/15600]	[L1: 17.5298]	[L1: 28.6126]	54.8+0.2s
[6400/15600]	[L1: 17.5910]	[L1: 28.6696]	54.9+0.2s
[8000/15600]	[L1: 17.6336]	[L1: 28.7158]	55.0+0.2s
[9600/15600]	[L1: 17.7180]	[L1: 28.7498]	55.1+0.2s
[11200/15600]	[L1: 17.6549]	[L1: 28.7174]	54.9+0.2s
[12800/15600]	[L1: 17.6293]	[L1: 28.7035]	55.0+0.2s
[14400/15600]	[L1: 17.5979]	[L1: 28.7074]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.218 (Best: 22.171 @epoch 24)
Forward: 4.08s

Saving...
Total: 6.46s

[Epoch 26]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.5285]	[L1: 28.6942]	55.0+4.2s
[3200/15600]	[L1: 17.4937]	[L1: 28.6822]	54.9+0.2s
[4800/15600]	[L1: 17.4755]	[L1: 28.4425]	55.0+0.2s
[6400/15600]	[L1: 17.4268]	[L1: 28.4185]	54.9+0.2s
[8000/15600]	[L1: 17.4915]	[L1: 28.5013]	54.7+0.2s
[9600/15600]	[L1: 17.4359]	[L1: 28.4332]	54.8+0.2s
[11200/15600]	[L1: 17.5508]	[L1: 28.5483]	54.9+0.2s
[12800/15600]	[L1: 17.4996]	[L1: 28.4842]	54.9+0.2s
[14400/15600]	[L1: 17.5055]	[L1: 28.5240]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.244 (Best: 22.171 @epoch 24)
Forward: 4.57s

Saving...
Total: 7.20s

[Epoch 27]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.5599]	[L1: 28.4039]	55.0+3.3s
[3200/15600]	[L1: 17.8568]	[L1: 28.8998]	55.1+0.2s
[4800/15600]	[L1: 17.7112]	[L1: 28.8103]	54.8+0.2s
[6400/15600]	[L1: 17.7746]	[L1: 28.7980]	55.0+0.2s
[8000/15600]	[L1: 17.7588]	[L1: 28.7724]	55.0+0.2s
[9600/15600]	[L1: 17.7757]	[L1: 28.7925]	54.9+0.2s
[11200/15600]	[L1: 17.6806]	[L1: 28.6896]	54.9+0.2s
[12800/15600]	[L1: 17.6259]	[L1: 28.5985]	55.0+0.2s
[14400/15600]	[L1: 17.5384]	[L1: 28.5584]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.390 (Best: 22.171 @epoch 24)
Forward: 4.33s

Saving...
Total: 6.77s

[Epoch 28]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.2316]	[L1: 28.6423]	54.9+4.2s
[3200/15600]	[L1: 17.3605]	[L1: 28.4466]	54.7+0.2s
[4800/15600]	[L1: 17.3189]	[L1: 28.3060]	55.0+0.2s
[6400/15600]	[L1: 17.3888]	[L1: 28.4968]	55.0+0.2s
[8000/15600]	[L1: 17.4375]	[L1: 28.4344]	55.0+0.2s
[9600/15600]	[L1: 17.4419]	[L1: 28.3971]	54.9+0.2s
[11200/15600]	[L1: 17.4437]	[L1: 28.4902]	54.9+0.2s
[12800/15600]	[L1: 17.4846]	[L1: 28.5600]	54.7+0.2s
[14400/15600]	[L1: 17.4379]	[L1: 28.5402]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.267 (Best: 22.171 @epoch 24)
Forward: 4.50s

Saving...
Total: 7.94s

[Epoch 29]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.7957]	[L1: 29.1065]	55.1+2.2s
[3200/15600]	[L1: 17.8051]	[L1: 29.1324]	54.9+0.2s
[4800/15600]	[L1: 17.6938]	[L1: 28.9581]	54.9+0.2s
[6400/15600]	[L1: 17.5162]	[L1: 28.6293]	54.9+0.2s
[8000/15600]	[L1: 17.4727]	[L1: 28.6667]	55.0+0.2s
[9600/15600]	[L1: 17.4473]	[L1: 28.5661]	55.0+0.2s
[11200/15600]	[L1: 17.4692]	[L1: 28.5973]	54.9+0.2s
[12800/15600]	[L1: 17.4731]	[L1: 28.5702]	54.8+0.2s
[14400/15600]	[L1: 17.4453]	[L1: 28.5560]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.887 (Best: 22.171 @epoch 24)
Forward: 4.67s

Saving...
Total: 7.09s

[Epoch 30]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.3969]	[L1: 28.4816]	55.1+1.5s
[3200/15600]	[L1: 17.3831]	[L1: 28.5483]	55.1+0.2s
[4800/15600]	[L1: 17.4296]	[L1: 28.6398]	55.0+0.2s
[6400/15600]	[L1: 17.4363]	[L1: 28.6388]	55.0+0.2s
[8000/15600]	[L1: 17.4657]	[L1: 28.6622]	55.0+0.2s
[9600/15600]	[L1: 17.3476]	[L1: 28.6205]	55.4+0.2s
[11200/15600]	[L1: 17.2706]	[L1: 28.5149]	55.1+0.2s
[12800/15600]	[L1: 17.2998]	[L1: 28.5221]	54.9+0.2s
[14400/15600]	[L1: 17.3342]	[L1: 28.5783]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.406 (Best: 22.171 @epoch 24)
Forward: 4.69s

Saving...
Total: 7.30s

[Epoch 31]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.1305]	[L1: 28.3899]	55.0+2.9s
[3200/15600]	[L1: 17.3718]	[L1: 28.4236]	54.9+0.2s
[4800/15600]	[L1: 17.4398]	[L1: 28.4747]	55.0+0.2s
[6400/15600]	[L1: 17.3211]	[L1: 28.4005]	55.1+0.2s
[8000/15600]	[L1: 17.3246]	[L1: 28.3984]	55.0+0.2s
[9600/15600]	[L1: 17.3272]	[L1: 28.4393]	55.1+0.2s
[11200/15600]	[L1: 17.2710]	[L1: 28.3940]	55.0+0.2s
[12800/15600]	[L1: 17.2567]	[L1: 28.4166]	54.9+0.2s
[14400/15600]	[L1: 17.2607]	[L1: 28.3849]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.503 (Best: 22.171 @epoch 24)
Forward: 5.23s

Saving...
Total: 7.61s

[Epoch 32]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.9329]	[L1: 28.3958]	55.0+3.8s
[3200/15600]	[L1: 16.8824]	[L1: 28.1602]	55.0+0.2s
[4800/15600]	[L1: 16.9600]	[L1: 28.2895]	54.8+0.2s
[6400/15600]	[L1: 17.0472]	[L1: 28.4002]	54.7+0.2s
[8000/15600]	[L1: 17.1039]	[L1: 28.4380]	55.1+0.2s
[9600/15600]	[L1: 17.1299]	[L1: 28.3760]	54.8+0.2s
[11200/15600]	[L1: 17.1554]	[L1: 28.4794]	54.9+0.2s
[12800/15600]	[L1: 17.1402]	[L1: 28.4525]	55.0+0.2s
[14400/15600]	[L1: 17.1185]	[L1: 28.4656]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.289 (Best: 22.171 @epoch 24)
Forward: 4.37s

Saving...
Total: 7.89s

[Epoch 33]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.4850]	[L1: 28.6300]	55.1+3.8s
[3200/15600]	[L1: 17.3026]	[L1: 28.6963]	55.0+0.2s
[4800/15600]	[L1: 17.3560]	[L1: 28.5912]	55.0+0.2s
[6400/15600]	[L1: 17.3176]	[L1: 28.5577]	55.1+0.2s
[8000/15600]	[L1: 17.2331]	[L1: 28.4377]	54.8+0.2s
[9600/15600]	[L1: 17.3188]	[L1: 28.5220]	54.8+0.2s
[11200/15600]	[L1: 17.2403]	[L1: 28.4651]	54.8+0.2s
[12800/15600]	[L1: 17.1924]	[L1: 28.3905]	54.8+0.2s
[14400/15600]	[L1: 17.1943]	[L1: 28.4334]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.109 (Best: 22.171 @epoch 24)
Forward: 4.54s

Saving...
Total: 7.11s

[Epoch 34]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.1174]	[L1: 28.2702]	55.1+4.3s
[3200/15600]	[L1: 16.8434]	[L1: 28.1432]	55.2+0.2s
[4800/15600]	[L1: 16.8067]	[L1: 28.1145]	55.2+0.2s
[6400/15600]	[L1: 16.7886]	[L1: 28.1193]	55.0+0.2s
[8000/15600]	[L1: 16.8380]	[L1: 28.1669]	55.1+0.2s
[9600/15600]	[L1: 16.8431]	[L1: 28.1746]	54.9+0.2s
[11200/15600]	[L1: 16.8443]	[L1: 28.1693]	54.9+0.2s
[12800/15600]	[L1: 16.8916]	[L1: 28.2038]	54.8+0.2s
[14400/15600]	[L1: 16.8918]	[L1: 28.2129]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.124 (Best: 22.171 @epoch 24)
Forward: 4.76s

Saving...
Total: 7.15s

[Epoch 35]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.5730]	[L1: 27.7061]	55.7+1.9s
[3200/15600]	[L1: 16.6686]	[L1: 28.0828]	55.5+0.2s
[4800/15600]	[L1: 16.8618]	[L1: 28.1147]	55.0+0.2s
[6400/15600]	[L1: 16.8456]	[L1: 28.0763]	55.0+0.2s
[8000/15600]	[L1: 16.8341]	[L1: 28.0587]	54.8+0.2s
[9600/15600]	[L1: 16.8620]	[L1: 28.1068]	54.7+0.2s
[11200/15600]	[L1: 16.8444]	[L1: 28.1175]	55.0+0.2s
[12800/15600]	[L1: 16.9085]	[L1: 28.1769]	55.1+0.2s
[14400/15600]	[L1: 16.9209]	[L1: 28.1949]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.829 (Best: 22.171 @epoch 24)
Forward: 4.81s

Saving...
Total: 7.23s

[Epoch 36]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.2595]	[L1: 28.9400]	55.2+2.8s
[3200/15600]	[L1: 17.1745]	[L1: 28.4497]	55.1+0.2s
[4800/15600]	[L1: 17.1152]	[L1: 28.4661]	54.7+0.2s
[6400/15600]	[L1: 17.0460]	[L1: 28.3713]	54.9+0.2s
[8000/15600]	[L1: 16.9795]	[L1: 28.3459]	55.0+0.2s
[9600/15600]	[L1: 16.8823]	[L1: 28.1943]	55.1+0.2s
[11200/15600]	[L1: 16.8459]	[L1: 28.1685]	55.1+0.2s
[12800/15600]	[L1: 16.8584]	[L1: 28.1691]	55.1+0.2s
[14400/15600]	[L1: 16.8979]	[L1: 28.2305]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.198 (Best: 22.171 @epoch 24)
Forward: 4.74s

Saving...
Total: 7.17s

[Epoch 37]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.8419]	[L1: 28.2375]	55.1+4.1s
[3200/15600]	[L1: 16.9503]	[L1: 28.0503]	54.8+0.2s
[4800/15600]	[L1: 16.8962]	[L1: 28.2400]	54.8+0.2s
[6400/15600]	[L1: 16.9097]	[L1: 28.2295]	55.0+0.2s
[8000/15600]	[L1: 16.8800]	[L1: 28.3123]	55.0+0.2s
[9600/15600]	[L1: 16.9532]	[L1: 28.3093]	55.1+0.2s
[11200/15600]	[L1: 16.8992]	[L1: 28.2912]	54.9+0.2s
[12800/15600]	[L1: 16.9368]	[L1: 28.3212]	55.0+0.2s
[14400/15600]	[L1: 16.9333]	[L1: 28.3757]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.261 (Best: 22.171 @epoch 24)
Forward: 4.99s

Saving...
Total: 7.67s

[Epoch 38]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.5028]	[L1: 27.8277]	55.2+4.4s
[3200/15600]	[L1: 16.7585]	[L1: 28.1716]	55.1+0.2s
[4800/15600]	[L1: 16.9195]	[L1: 28.3028]	55.0+0.2s
[6400/15600]	[L1: 16.9377]	[L1: 28.3586]	54.8+0.2s
[8000/15600]	[L1: 16.9508]	[L1: 28.2761]	54.8+0.2s
[9600/15600]	[L1: 16.8937]	[L1: 28.2220]	54.8+0.2s
[11200/15600]	[L1: 16.9502]	[L1: 28.2412]	54.8+0.2s
[12800/15600]	[L1: 16.9650]	[L1: 28.2431]	55.2+0.2s
[14400/15600]	[L1: 16.9642]	[L1: 28.2957]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.077 (Best: 22.171 @epoch 24)
Forward: 4.51s

Saving...
Total: 6.91s

[Epoch 39]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.5773]	[L1: 29.0314]	55.1+1.6s
[3200/15600]	[L1: 17.1548]	[L1: 28.7355]	55.0+0.2s
[4800/15600]	[L1: 17.0687]	[L1: 28.4541]	54.8+0.2s
[6400/15600]	[L1: 16.9054]	[L1: 28.1588]	54.9+0.2s
[8000/15600]	[L1: 16.8730]	[L1: 28.1351]	54.9+0.2s
[9600/15600]	[L1: 16.9082]	[L1: 28.2328]	55.0+0.2s
[11200/15600]	[L1: 16.9047]	[L1: 28.2248]	54.9+0.2s
[12800/15600]	[L1: 16.8937]	[L1: 28.1660]	54.8+0.2s
[14400/15600]	[L1: 16.8462]	[L1: 28.1299]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.197 (Best: 22.171 @epoch 24)
Forward: 4.73s

Saving...
Total: 7.14s

[Epoch 40]	Learning rate: 1.00e-4
[1600/15600]	[L1: 17.0354]	[L1: 28.3595]	55.0+4.0s
[3200/15600]	[L1: 17.1070]	[L1: 28.4910]	54.7+0.2s
[4800/15600]	[L1: 16.9429]	[L1: 28.4109]	54.7+0.2s
[6400/15600]	[L1: 16.8732]	[L1: 28.2379]	54.7+0.2s
[8000/15600]	[L1: 16.8271]	[L1: 28.1375]	54.7+0.2s
[9600/15600]	[L1: 16.7953]	[L1: 28.1006]	55.0+0.2s
[11200/15600]	[L1: 16.8227]	[L1: 28.1678]	55.0+0.2s
[12800/15600]	[L1: 16.8507]	[L1: 28.1893]	54.7+0.2s
[14400/15600]	[L1: 16.8456]	[L1: 28.2344]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.527 (Best: 22.527 @epoch 40)
Forward: 4.14s

Saving...
Total: 6.68s

[Epoch 41]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.6574]	[L1: 28.2300]	55.0+3.0s
[3200/15600]	[L1: 16.7589]	[L1: 28.5537]	55.0+0.2s
[4800/15600]	[L1: 16.8161]	[L1: 28.5225]	55.0+0.2s
[6400/15600]	[L1: 16.9400]	[L1: 28.4689]	55.3+0.2s
[8000/15600]	[L1: 16.9540]	[L1: 28.4225]	55.2+0.2s
[9600/15600]	[L1: 16.8622]	[L1: 28.2353]	55.1+0.2s
[11200/15600]	[L1: 16.7971]	[L1: 28.2131]	54.8+0.2s
[12800/15600]	[L1: 16.7765]	[L1: 28.2107]	54.8+0.2s
[14400/15600]	[L1: 16.7695]	[L1: 28.1907]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 19.813 (Best: 22.527 @epoch 40)
Forward: 4.48s

Saving...
Total: 7.87s

[Epoch 42]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.6642]	[L1: 27.6942]	54.9+3.9s
[3200/15600]	[L1: 16.9547]	[L1: 28.0147]	55.0+0.2s
[4800/15600]	[L1: 16.8930]	[L1: 28.1068]	54.9+0.2s
[6400/15600]	[L1: 16.9523]	[L1: 28.1598]	55.0+0.2s
[8000/15600]	[L1: 16.9233]	[L1: 28.1652]	55.0+0.2s
[9600/15600]	[L1: 16.8819]	[L1: 28.1896]	54.9+0.2s
[11200/15600]	[L1: 16.8308]	[L1: 28.1697]	55.0+0.2s
[12800/15600]	[L1: 16.8256]	[L1: 28.1461]	54.9+0.2s
[14400/15600]	[L1: 16.8295]	[L1: 28.1334]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.168 (Best: 22.527 @epoch 40)
Forward: 4.92s

Saving...
Total: 8.38s

[Epoch 43]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.6494]	[L1: 27.6715]	54.9+2.5s
[3200/15600]	[L1: 16.6971]	[L1: 27.9025]	54.8+0.2s
[4800/15600]	[L1: 16.7236]	[L1: 28.1145]	54.8+0.2s
[6400/15600]	[L1: 16.6613]	[L1: 27.9686]	54.8+0.2s
[8000/15600]	[L1: 16.5973]	[L1: 27.9591]	54.9+0.2s
[9600/15600]	[L1: 16.6170]	[L1: 27.9525]	54.9+0.2s
[11200/15600]	[L1: 16.6314]	[L1: 27.9707]	55.0+0.2s
[12800/15600]	[L1: 16.6289]	[L1: 27.9855]	55.1+0.2s
[14400/15600]	[L1: 16.6202]	[L1: 27.9773]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.330 (Best: 22.527 @epoch 40)
Forward: 5.07s

Saving...
Total: 7.44s

[Epoch 44]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.7354]	[L1: 28.0676]	54.9+5.4s
[3200/15600]	[L1: 16.5935]	[L1: 28.0277]	55.0+0.2s
[4800/15600]	[L1: 16.5883]	[L1: 28.1336]	55.5+0.2s
[6400/15600]	[L1: 16.6208]	[L1: 28.1712]	54.8+0.2s
[8000/15600]	[L1: 16.6061]	[L1: 28.1384]	54.7+0.2s
[9600/15600]	[L1: 16.5748]	[L1: 28.1219]	54.7+0.2s
[11200/15600]	[L1: 16.5781]	[L1: 28.1448]	55.0+0.2s
[12800/15600]	[L1: 16.6342]	[L1: 28.1500]	55.0+0.2s
[14400/15600]	[L1: 16.6270]	[L1: 28.1033]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.846 (Best: 22.527 @epoch 40)
Forward: 4.36s

Saving...
Total: 7.10s

[Epoch 45]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.7573]	[L1: 27.9019]	55.0+3.1s
[3200/15600]	[L1: 16.7976]	[L1: 28.1278]	54.8+0.2s
[4800/15600]	[L1: 16.7125]	[L1: 28.0234]	54.7+0.2s
[6400/15600]	[L1: 16.6374]	[L1: 27.9565]	55.0+0.2s
[8000/15600]	[L1: 16.6185]	[L1: 27.9913]	55.0+0.2s
[9600/15600]	[L1: 16.5554]	[L1: 27.9994]	55.5+0.2s
[11200/15600]	[L1: 16.5234]	[L1: 27.9535]	55.2+0.2s
[12800/15600]	[L1: 16.4888]	[L1: 27.8859]	54.9+0.2s
[14400/15600]	[L1: 16.4809]	[L1: 27.8489]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.493 (Best: 22.527 @epoch 40)
Forward: 4.42s

Saving...
Total: 6.80s

[Epoch 46]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.7330]	[L1: 28.2626]	55.1+3.1s
[3200/15600]	[L1: 16.5355]	[L1: 28.0749]	54.8+0.2s
[4800/15600]	[L1: 16.6304]	[L1: 28.2078]	54.8+0.2s
[6400/15600]	[L1: 16.7275]	[L1: 28.2276]	54.8+0.2s
[8000/15600]	[L1: 16.6094]	[L1: 28.0618]	54.8+0.2s
[9600/15600]	[L1: 16.5692]	[L1: 27.9875]	54.8+0.2s
[11200/15600]	[L1: 16.5269]	[L1: 27.9677]	54.7+0.2s
[12800/15600]	[L1: 16.5124]	[L1: 27.9432]	54.8+0.2s
[14400/15600]	[L1: 16.5765]	[L1: 27.9737]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.992 (Best: 22.527 @epoch 40)
Forward: 3.86s

Saving...
Total: 7.26s

[Epoch 47]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.8258]	[L1: 28.3562]	55.1+3.8s
[3200/15600]	[L1: 16.4196]	[L1: 27.6796]	55.0+0.2s
[4800/15600]	[L1: 16.2641]	[L1: 27.7215]	54.9+0.2s
[6400/15600]	[L1: 16.2387]	[L1: 27.6584]	54.8+0.2s
[8000/15600]	[L1: 16.2935]	[L1: 27.8426]	54.9+0.2s
[9600/15600]	[L1: 16.3266]	[L1: 27.8888]	55.2+0.2s
[11200/15600]	[L1: 16.3494]	[L1: 27.9107]	54.9+0.2s
[12800/15600]	[L1: 16.3521]	[L1: 27.9336]	55.0+0.2s
[14400/15600]	[L1: 16.3743]	[L1: 27.9789]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.923 (Best: 22.527 @epoch 40)
Forward: 5.05s

Saving...
Total: 7.47s

[Epoch 48]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.7430]	[L1: 28.2398]	54.9+1.7s
[3200/15600]	[L1: 16.8286]	[L1: 28.2749]	54.7+0.2s
[4800/15600]	[L1: 16.6324]	[L1: 28.1456]	54.9+0.2s
[6400/15600]	[L1: 16.6119]	[L1: 28.1349]	55.0+0.2s
[8000/15600]	[L1: 16.6280]	[L1: 28.1369]	54.7+0.2s
[9600/15600]	[L1: 16.5794]	[L1: 28.1737]	54.7+0.2s
[11200/15600]	[L1: 16.5769]	[L1: 28.1469]	54.8+0.2s
[12800/15600]	[L1: 16.5701]	[L1: 28.1009]	55.2+0.2s
[14400/15600]	[L1: 16.5531]	[L1: 28.0904]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.736 (Best: 22.527 @epoch 40)
Forward: 3.99s

Saving...
Total: 6.59s

[Epoch 49]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.8637]	[L1: 27.6055]	55.0+2.6s
[3200/15600]	[L1: 16.1012]	[L1: 27.6472]	54.9+0.2s
[4800/15600]	[L1: 16.1545]	[L1: 27.5452]	54.9+0.2s
[6400/15600]	[L1: 16.2447]	[L1: 27.6489]	54.8+0.2s
[8000/15600]	[L1: 16.2974]	[L1: 27.6160]	54.8+0.2s
[9600/15600]	[L1: 16.2288]	[L1: 27.6278]	55.4+0.2s
[11200/15600]	[L1: 16.2425]	[L1: 27.6323]	55.3+0.2s
[12800/15600]	[L1: 16.2932]	[L1: 27.7237]	55.1+0.2s
[14400/15600]	[L1: 16.3160]	[L1: 27.7582]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.807 (Best: 22.527 @epoch 40)
Forward: 4.66s

Saving...
Total: 8.08s

[Epoch 50]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.5850]	[L1: 28.2392]	55.5+3.4s
[3200/15600]	[L1: 16.3938]	[L1: 27.9401]	55.1+0.2s
[4800/15600]	[L1: 16.5245]	[L1: 28.0186]	56.8+0.2s
[6400/15600]	[L1: 16.4812]	[L1: 27.9015]	56.3+0.2s
[8000/15600]	[L1: 16.5121]	[L1: 27.8742]	55.2+0.2s
[9600/15600]	[L1: 16.4782]	[L1: 27.9133]	55.0+0.2s
[11200/15600]	[L1: 16.4254]	[L1: 27.8325]	55.0+0.2s
[12800/15600]	[L1: 16.3427]	[L1: 27.8079]	55.0+0.2s
[14400/15600]	[L1: 16.2963]	[L1: 27.7449]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.081 (Best: 23.081 @epoch 50)
Forward: 4.91s

Saving...
Total: 7.33s

[Epoch 51]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.3937]	[L1: 28.2000]	54.9+2.6s
[3200/15600]	[L1: 16.3676]	[L1: 28.0580]	55.2+0.2s
[4800/15600]	[L1: 16.3332]	[L1: 28.1327]	54.7+0.2s
[6400/15600]	[L1: 16.3624]	[L1: 28.0695]	54.7+0.2s
[8000/15600]	[L1: 16.3183]	[L1: 28.0041]	54.8+0.2s
[9600/15600]	[L1: 16.2830]	[L1: 28.0168]	54.8+0.2s
[11200/15600]	[L1: 16.3072]	[L1: 28.0015]	54.9+0.2s
[12800/15600]	[L1: 16.3629]	[L1: 28.0119]	55.1+0.2s
[14400/15600]	[L1: 16.4218]	[L1: 28.0660]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.737 (Best: 23.081 @epoch 50)
Forward: 3.85s

Saving...
Total: 6.52s

[Epoch 52]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.6177]	[L1: 28.1770]	55.2+3.1s
[3200/15600]	[L1: 16.6009]	[L1: 28.3295]	54.9+0.2s
[4800/15600]	[L1: 16.5250]	[L1: 28.2808]	54.7+0.2s
[6400/15600]	[L1: 16.4569]	[L1: 28.1314]	54.9+0.2s
[8000/15600]	[L1: 16.3864]	[L1: 28.0540]	54.9+0.2s
[9600/15600]	[L1: 16.3016]	[L1: 27.9420]	54.9+0.2s
[11200/15600]	[L1: 16.3100]	[L1: 27.9304]	54.9+0.2s
[12800/15600]	[L1: 16.3434]	[L1: 27.9821]	54.8+0.2s
[14400/15600]	[L1: 16.2988]	[L1: 27.9411]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.491 (Best: 23.081 @epoch 50)
Forward: 4.27s

Saving...
Total: 6.74s

[Epoch 53]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.1127]	[L1: 27.7376]	55.6+4.2s
[3200/15600]	[L1: 16.1810]	[L1: 27.7502]	55.7+0.2s
[4800/15600]	[L1: 16.1003]	[L1: 27.7859]	55.2+0.2s
[6400/15600]	[L1: 16.1461]	[L1: 27.8116]	55.2+0.2s
[8000/15600]	[L1: 16.1881]	[L1: 27.7607]	54.8+0.2s
[9600/15600]	[L1: 16.1527]	[L1: 27.6617]	54.8+0.2s
[11200/15600]	[L1: 16.1592]	[L1: 27.6727]	54.7+0.2s
[12800/15600]	[L1: 16.1362]	[L1: 27.6695]	54.9+0.2s
[14400/15600]	[L1: 16.1802]	[L1: 27.7401]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.340 (Best: 23.081 @epoch 50)
Forward: 4.77s

Saving...
Total: 7.19s

[Epoch 54]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.9722]	[L1: 27.8560]	55.1+4.2s
[3200/15600]	[L1: 15.9268]	[L1: 27.5513]	54.7+0.2s
[4800/15600]	[L1: 16.1021]	[L1: 27.7572]	54.8+0.2s
[6400/15600]	[L1: 16.0997]	[L1: 27.6944]	54.7+0.2s
[8000/15600]	[L1: 16.1005]	[L1: 27.7654]	54.9+0.2s
[9600/15600]	[L1: 16.0857]	[L1: 27.7727]	54.8+0.2s
[11200/15600]	[L1: 16.1381]	[L1: 27.7911]	54.8+0.2s
[12800/15600]	[L1: 16.1692]	[L1: 27.7495]	54.8+0.2s
[14400/15600]	[L1: 16.1373]	[L1: 27.7343]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.977 (Best: 23.081 @epoch 50)
Forward: 4.61s

Saving...
Total: 7.03s

[Epoch 55]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.2807]	[L1: 27.5287]	55.2+6.0s
[3200/15600]	[L1: 16.1156]	[L1: 27.5576]	55.1+0.2s
[4800/15600]	[L1: 16.0984]	[L1: 27.6559]	55.1+0.2s
[6400/15600]	[L1: 16.2418]	[L1: 27.7399]	54.9+0.2s
[8000/15600]	[L1: 16.3187]	[L1: 27.8287]	54.9+0.2s
[9600/15600]	[L1: 16.3867]	[L1: 27.9196]	54.8+0.2s
[11200/15600]	[L1: 16.3154]	[L1: 27.8657]	54.7+0.2s
[12800/15600]	[L1: 16.3327]	[L1: 27.8649]	54.7+0.2s
[14400/15600]	[L1: 16.3019]	[L1: 27.8597]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.779 (Best: 23.081 @epoch 50)
Forward: 4.65s

Saving...
Total: 7.26s

[Epoch 56]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.7376]	[L1: 27.5807]	55.2+1.9s
[3200/15600]	[L1: 15.8757]	[L1: 27.6313]	54.9+0.2s
[4800/15600]	[L1: 15.9661]	[L1: 27.7137]	54.9+0.2s
[6400/15600]	[L1: 16.0520]	[L1: 27.6934]	55.4+0.2s
[8000/15600]	[L1: 16.1517]	[L1: 27.7909]	54.9+0.2s
[9600/15600]	[L1: 16.2316]	[L1: 27.8832]	55.0+0.2s
[11200/15600]	[L1: 16.2061]	[L1: 27.8377]	54.8+0.2s
[12800/15600]	[L1: 16.2147]	[L1: 27.8391]	55.3+0.2s
[14400/15600]	[L1: 16.2171]	[L1: 27.8144]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.502 (Best: 23.081 @epoch 50)
Forward: 4.20s

Saving...
Total: 6.61s

[Epoch 57]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.2086]	[L1: 27.8557]	55.0+2.9s
[3200/15600]	[L1: 16.2484]	[L1: 27.8075]	54.9+0.2s
[4800/15600]	[L1: 16.0450]	[L1: 27.6702]	54.8+0.2s
[6400/15600]	[L1: 16.0194]	[L1: 27.5660]	54.9+0.2s
[8000/15600]	[L1: 15.9502]	[L1: 27.5624]	54.9+0.2s
[9600/15600]	[L1: 16.0197]	[L1: 27.6363]	54.8+0.2s
[11200/15600]	[L1: 16.0374]	[L1: 27.6194]	54.9+0.2s
[12800/15600]	[L1: 16.0290]	[L1: 27.6305]	55.0+0.2s
[14400/15600]	[L1: 15.9933]	[L1: 27.5827]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.403 (Best: 23.081 @epoch 50)
Forward: 4.54s

Saving...
Total: 7.06s

[Epoch 58]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.5168]	[L1: 28.0993]	55.2+4.3s
[3200/15600]	[L1: 16.2387]	[L1: 27.8391]	54.9+0.2s
[4800/15600]	[L1: 16.1626]	[L1: 27.7874]	54.8+0.2s
[6400/15600]	[L1: 16.2176]	[L1: 27.9056]	54.7+0.2s
[8000/15600]	[L1: 16.1859]	[L1: 27.7748]	54.9+0.2s
[9600/15600]	[L1: 16.1269]	[L1: 27.7635]	54.9+0.2s
[11200/15600]	[L1: 16.1579]	[L1: 27.7442]	55.0+0.2s
[12800/15600]	[L1: 16.1570]	[L1: 27.7569]	54.9+0.2s
[14400/15600]	[L1: 16.1437]	[L1: 27.7352]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.074 (Best: 23.081 @epoch 50)
Forward: 4.12s

Saving...
Total: 6.68s

[Epoch 59]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.9387]	[L1: 27.1151]	55.1+6.6s
[3200/15600]	[L1: 15.9649]	[L1: 27.4518]	54.9+0.2s
[4800/15600]	[L1: 15.9483]	[L1: 27.5190]	55.0+0.2s
[6400/15600]	[L1: 15.9542]	[L1: 27.5859]	54.9+0.2s
[8000/15600]	[L1: 16.0466]	[L1: 27.7258]	54.9+0.2s
[9600/15600]	[L1: 16.0935]	[L1: 27.7184]	55.1+0.2s
[11200/15600]	[L1: 16.0599]	[L1: 27.6897]	54.9+0.2s
[12800/15600]	[L1: 16.0808]	[L1: 27.7188]	54.9+0.2s
[14400/15600]	[L1: 16.0136]	[L1: 27.6417]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.767 (Best: 23.081 @epoch 50)
Forward: 4.57s

Saving...
Total: 7.05s

[Epoch 60]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.0048]	[L1: 27.6306]	55.0+3.3s
[3200/15600]	[L1: 16.0875]	[L1: 27.7030]	55.0+0.2s
[4800/15600]	[L1: 15.8678]	[L1: 27.4985]	55.2+0.2s
[6400/15600]	[L1: 15.8863]	[L1: 27.4478]	55.2+0.2s
[8000/15600]	[L1: 15.9492]	[L1: 27.5062]	55.1+0.2s
[9600/15600]	[L1: 16.0024]	[L1: 27.5625]	54.7+0.2s
[11200/15600]	[L1: 16.0738]	[L1: 27.6220]	54.9+0.2s
[12800/15600]	[L1: 16.0965]	[L1: 27.7134]	54.8+0.2s
[14400/15600]	[L1: 16.1016]	[L1: 27.6737]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.115 (Best: 23.081 @epoch 50)
Forward: 4.49s

Saving...
Total: 6.90s

[Epoch 61]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.9582]	[L1: 27.5039]	55.1+3.2s
[3200/15600]	[L1: 16.0456]	[L1: 27.5934]	55.1+0.2s
[4800/15600]	[L1: 16.0629]	[L1: 27.5661]	54.8+0.2s
[6400/15600]	[L1: 16.0551]	[L1: 27.6161]	54.7+0.2s
[8000/15600]	[L1: 16.0749]	[L1: 27.6860]	54.8+0.2s
[9600/15600]	[L1: 16.0872]	[L1: 27.7217]	55.0+0.2s
[11200/15600]	[L1: 16.0519]	[L1: 27.6938]	54.9+0.2s
[12800/15600]	[L1: 16.0000]	[L1: 27.6346]	55.0+0.2s
[14400/15600]	[L1: 16.0201]	[L1: 27.6356]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.586 (Best: 23.081 @epoch 50)
Forward: 4.05s

Saving...
Total: 6.55s

[Epoch 62]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.7083]	[L1: 27.8551]	55.1+5.8s
[3200/15600]	[L1: 15.9335]	[L1: 27.8731]	55.1+0.2s
[4800/15600]	[L1: 15.8440]	[L1: 27.6528]	55.0+0.2s
[6400/15600]	[L1: 15.9178]	[L1: 27.7022]	54.9+0.2s
[8000/15600]	[L1: 15.8646]	[L1: 27.6213]	55.2+0.2s
[9600/15600]	[L1: 15.9309]	[L1: 27.6638]	54.9+0.2s
[11200/15600]	[L1: 15.9150]	[L1: 27.6067]	54.9+0.4s
[12800/15600]	[L1: 15.9010]	[L1: 27.6240]	54.8+0.2s
[14400/15600]	[L1: 15.9062]	[L1: 27.6314]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.655 (Best: 23.081 @epoch 50)
Forward: 4.27s

Saving...
Total: 6.84s

[Epoch 63]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.9917]	[L1: 27.2715]	55.0+2.7s
[3200/15600]	[L1: 16.0415]	[L1: 27.4452]	55.0+0.2s
[4800/15600]	[L1: 16.1179]	[L1: 27.5282]	54.9+0.2s
[6400/15600]	[L1: 16.0775]	[L1: 27.5888]	54.9+0.2s
[8000/15600]	[L1: 16.0094]	[L1: 27.6242]	55.0+0.2s
[9600/15600]	[L1: 15.9636]	[L1: 27.6915]	54.9+0.2s
[11200/15600]	[L1: 15.9618]	[L1: 27.6434]	55.0+0.2s
[12800/15600]	[L1: 15.9737]	[L1: 27.6334]	54.9+0.2s
[14400/15600]	[L1: 15.9945]	[L1: 27.6753]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.058 (Best: 23.081 @epoch 50)
Forward: 3.93s

Saving...
Total: 7.34s

[Epoch 64]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.6836]	[L1: 27.2948]	55.1+5.4s
[3200/15600]	[L1: 15.7441]	[L1: 27.2515]	55.0+0.2s
[4800/15600]	[L1: 15.8748]	[L1: 27.4437]	54.9+0.2s
[6400/15600]	[L1: 15.9637]	[L1: 27.6271]	55.1+0.2s
[8000/15600]	[L1: 16.0093]	[L1: 27.6415]	55.0+0.2s
[9600/15600]	[L1: 15.9334]	[L1: 27.5904]	55.0+0.2s
[11200/15600]	[L1: 15.8887]	[L1: 27.5096]	54.9+0.2s
[12800/15600]	[L1: 15.9275]	[L1: 27.5533]	55.0+0.2s
[14400/15600]	[L1: 15.9111]	[L1: 27.5087]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 20.616 (Best: 23.081 @epoch 50)
Forward: 4.46s

Saving...
Total: 6.95s

[Epoch 65]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.6736]	[L1: 27.2389]	55.9+2.7s
[3200/15600]	[L1: 15.7568]	[L1: 27.2491]	54.9+0.2s
[4800/15600]	[L1: 15.7233]	[L1: 27.2837]	54.8+0.2s
[6400/15600]	[L1: 15.7314]	[L1: 27.3173]	54.8+0.2s
[8000/15600]	[L1: 15.7700]	[L1: 27.3932]	55.1+0.2s
[9600/15600]	[L1: 15.8417]	[L1: 27.4867]	55.0+0.2s
[11200/15600]	[L1: 15.9182]	[L1: 27.5720]	54.9+0.2s
[12800/15600]	[L1: 15.8726]	[L1: 27.4682]	54.8+0.2s
[14400/15600]	[L1: 15.8924]	[L1: 27.4845]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.118 (Best: 23.118 @epoch 65)
Forward: 4.51s

Saving...
Total: 7.09s

[Epoch 66]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.3741]	[L1: 27.0335]	55.0+2.3s
[3200/15600]	[L1: 15.6005]	[L1: 27.0793]	54.8+0.2s
[4800/15600]	[L1: 15.6387]	[L1: 27.1257]	54.9+0.2s
[6400/15600]	[L1: 15.6752]	[L1: 27.2579]	55.0+0.2s
[8000/15600]	[L1: 15.6871]	[L1: 27.3059]	55.1+0.2s
[9600/15600]	[L1: 15.7449]	[L1: 27.2762]	55.2+0.2s
[11200/15600]	[L1: 15.8466]	[L1: 27.3809]	54.9+0.2s
[12800/15600]	[L1: 15.8567]	[L1: 27.3804]	54.8+0.2s
[14400/15600]	[L1: 15.8337]	[L1: 27.3315]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.069 (Best: 23.118 @epoch 65)
Forward: 4.69s

Saving...
Total: 7.11s

[Epoch 67]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.4986]	[L1: 27.0321]	55.0+3.4s
[3200/15600]	[L1: 15.5155]	[L1: 27.2612]	55.0+0.2s
[4800/15600]	[L1: 15.5237]	[L1: 27.2657]	55.0+0.2s
[6400/15600]	[L1: 15.5873]	[L1: 27.3195]	55.0+0.2s
[8000/15600]	[L1: 15.6490]	[L1: 27.4378]	55.1+0.2s
[9600/15600]	[L1: 15.6463]	[L1: 27.3992]	54.9+0.2s
[11200/15600]	[L1: 15.6784]	[L1: 27.4047]	54.8+0.2s
[12800/15600]	[L1: 15.7221]	[L1: 27.4112]	54.7+0.2s
[14400/15600]	[L1: 15.7410]	[L1: 27.4165]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.440 (Best: 23.118 @epoch 65)
Forward: 4.06s

Saving...
Total: 6.62s

[Epoch 68]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.0986]	[L1: 27.6318]	54.9+3.2s
[3200/15600]	[L1: 16.0887]	[L1: 27.5166]	54.9+0.2s
[4800/15600]	[L1: 15.8567]	[L1: 27.3163]	55.1+0.2s
[6400/15600]	[L1: 15.9437]	[L1: 27.5043]	55.0+0.2s
[8000/15600]	[L1: 15.8288]	[L1: 27.4583]	55.3+0.2s
[9600/15600]	[L1: 15.8419]	[L1: 27.4921]	55.4+0.2s
[11200/15600]	[L1: 15.8519]	[L1: 27.5141]	54.9+0.2s
[12800/15600]	[L1: 15.8494]	[L1: 27.5333]	55.1+0.2s
[14400/15600]	[L1: 15.9086]	[L1: 27.5879]	55.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.474 (Best: 23.118 @epoch 65)
Forward: 4.49s

Saving...
Total: 7.89s

[Epoch 69]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.2496]	[L1: 27.7055]	55.5+2.7s
[3200/15600]	[L1: 16.0269]	[L1: 27.7299]	54.9+0.2s
[4800/15600]	[L1: 15.8944]	[L1: 27.6205]	55.1+0.2s
[6400/15600]	[L1: 15.8248]	[L1: 27.4881]	55.3+0.2s
[8000/15600]	[L1: 15.7846]	[L1: 27.4380]	55.1+0.2s
[9600/15600]	[L1: 15.8040]	[L1: 27.4529]	54.7+0.2s
[11200/15600]	[L1: 15.7842]	[L1: 27.4734]	55.0+0.2s
[12800/15600]	[L1: 15.7219]	[L1: 27.4534]	54.9+0.2s
[14400/15600]	[L1: 15.7336]	[L1: 27.4943]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.965 (Best: 23.118 @epoch 65)
Forward: 4.17s

Saving...
Total: 6.70s

[Epoch 70]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.5661]	[L1: 27.3450]	54.8+6.2s
[3200/15600]	[L1: 15.8740]	[L1: 27.5652]	55.0+0.2s
[4800/15600]	[L1: 15.9344]	[L1: 27.4058]	54.8+0.2s
[6400/15600]	[L1: 15.8287]	[L1: 27.2823]	54.9+0.2s
[8000/15600]	[L1: 15.7931]	[L1: 27.3389]	55.0+0.2s
[9600/15600]	[L1: 15.8039]	[L1: 27.4197]	54.9+0.2s
[11200/15600]	[L1: 15.8654]	[L1: 27.5592]	55.0+0.2s
[12800/15600]	[L1: 15.8614]	[L1: 27.5890]	55.6+0.2s
[14400/15600]	[L1: 15.8191]	[L1: 27.5332]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.805 (Best: 23.118 @epoch 65)
Forward: 4.95s

Saving...
Total: 7.36s

[Epoch 71]	Learning rate: 1.00e-4
[1600/15600]	[L1: 16.4406]	[L1: 27.8112]	55.0+2.0s
[3200/15600]	[L1: 16.0006]	[L1: 27.5618]	54.9+0.2s
[4800/15600]	[L1: 15.8370]	[L1: 27.4616]	54.9+0.2s
[6400/15600]	[L1: 15.7476]	[L1: 27.3772]	55.0+0.2s
[8000/15600]	[L1: 15.7162]	[L1: 27.3542]	54.8+0.2s
[9600/15600]	[L1: 15.6238]	[L1: 27.2871]	55.2+0.8s
[11200/15600]	[L1: 15.6329]	[L1: 27.2686]	55.1+0.2s
[12800/15600]	[L1: 15.6195]	[L1: 27.2399]	55.1+1.3s
[14400/15600]	[L1: 15.6215]	[L1: 27.2831]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.989 (Best: 23.118 @epoch 65)
Forward: 4.56s

Saving...
Total: 7.06s

[Epoch 72]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.6030]	[L1: 27.3661]	54.8+2.9s
[3200/15600]	[L1: 15.8449]	[L1: 27.5999]	54.8+0.2s
[4800/15600]	[L1: 15.7821]	[L1: 27.6021]	55.0+0.2s
[6400/15600]	[L1: 15.8908]	[L1: 27.5819]	55.1+0.2s
[8000/15600]	[L1: 15.8832]	[L1: 27.5388]	54.8+0.2s
[9600/15600]	[L1: 15.8976]	[L1: 27.5747]	54.8+0.2s
[11200/15600]	[L1: 15.8755]	[L1: 27.5119]	54.8+0.2s
[12800/15600]	[L1: 15.8340]	[L1: 27.5085]	54.8+0.2s
[14400/15600]	[L1: 15.7921]	[L1: 27.4522]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.601 (Best: 23.118 @epoch 65)
Forward: 4.60s

Saving...
Total: 7.02s

[Epoch 73]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.4554]	[L1: 27.0958]	55.2+2.5s
[3200/15600]	[L1: 15.4739]	[L1: 27.3268]	54.9+0.2s
[4800/15600]	[L1: 15.5210]	[L1: 27.3634]	54.8+0.2s
[6400/15600]	[L1: 15.5214]	[L1: 27.3806]	55.0+0.2s
[8000/15600]	[L1: 15.5693]	[L1: 27.3592]	54.9+0.2s
[9600/15600]	[L1: 15.5679]	[L1: 27.4002]	55.1+0.2s
[11200/15600]	[L1: 15.5928]	[L1: 27.3563]	55.0+0.2s
[12800/15600]	[L1: 15.5771]	[L1: 27.3404]	55.0+0.2s
[14400/15600]	[L1: 15.6164]	[L1: 27.3712]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.431 (Best: 23.118 @epoch 65)
Forward: 4.58s

Saving...
Total: 7.13s

[Epoch 74]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.3188]	[L1: 26.9872]	55.2+3.7s
[3200/15600]	[L1: 15.2884]	[L1: 27.1051]	54.8+0.2s
[4800/15600]	[L1: 15.4627]	[L1: 27.1991]	54.8+0.2s
[6400/15600]	[L1: 15.5898]	[L1: 27.2754]	54.8+0.2s
[8000/15600]	[L1: 15.6443]	[L1: 27.3023]	54.9+0.2s
[9600/15600]	[L1: 15.6729]	[L1: 27.3512]	54.9+0.2s
[11200/15600]	[L1: 15.6981]	[L1: 27.4308]	55.0+0.2s
[12800/15600]	[L1: 15.6749]	[L1: 27.4442]	55.0+0.2s
[14400/15600]	[L1: 15.7164]	[L1: 27.4423]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 21.975 (Best: 23.118 @epoch 65)
Forward: 4.83s

Saving...
Total: 7.27s

[Epoch 75]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.4134]	[L1: 27.5146]	54.9+3.7s
[3200/15600]	[L1: 15.3894]	[L1: 27.4027]	54.8+0.2s
[4800/15600]	[L1: 15.4064]	[L1: 27.3752]	54.8+0.2s
[6400/15600]	[L1: 15.4767]	[L1: 27.2773]	55.2+0.2s
[8000/15600]	[L1: 15.4121]	[L1: 27.1605]	55.0+0.2s
[9600/15600]	[L1: 15.4942]	[L1: 27.1488]	55.3+0.2s
[11200/15600]	[L1: 15.4255]	[L1: 27.1103]	54.8+0.2s
[12800/15600]	[L1: 15.4313]	[L1: 27.1110]	54.8+0.2s
[14400/15600]	[L1: 15.4310]	[L1: 27.1193]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.705 (Best: 23.118 @epoch 65)
Forward: 4.29s

Saving...
Total: 6.74s

[Epoch 76]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.7679]	[L1: 27.0138]	54.9+3.3s
[3200/15600]	[L1: 16.0148]	[L1: 27.5196]	54.8+0.2s
[4800/15600]	[L1: 15.9634]	[L1: 27.6031]	54.9+0.2s
[6400/15600]	[L1: 15.7650]	[L1: 27.4766]	54.9+0.2s
[8000/15600]	[L1: 15.7115]	[L1: 27.5051]	54.8+0.2s
[9600/15600]	[L1: 15.6844]	[L1: 27.4305]	54.8+0.2s
[11200/15600]	[L1: 15.7516]	[L1: 27.4742]	54.8+0.2s
[12800/15600]	[L1: 15.7898]	[L1: 27.5300]	54.8+0.2s
[14400/15600]	[L1: 15.7166]	[L1: 27.4596]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.313 (Best: 23.313 @epoch 76)
Forward: 4.13s

Saving...
Total: 6.87s

[Epoch 77]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.2660]	[L1: 26.7909]	54.9+3.8s
[3200/15600]	[L1: 15.4365]	[L1: 27.0702]	54.7+0.2s
[4800/15600]	[L1: 15.5160]	[L1: 27.2358]	54.8+0.2s
[6400/15600]	[L1: 15.4953]	[L1: 27.2944]	54.9+0.2s
[8000/15600]	[L1: 15.5595]	[L1: 27.3386]	54.8+0.2s
[9600/15600]	[L1: 15.5010]	[L1: 27.3267]	54.8+0.3s
[11200/15600]	[L1: 15.5381]	[L1: 27.3502]	54.8+0.2s
[12800/15600]	[L1: 15.4771]	[L1: 27.3610]	54.8+0.2s
[14400/15600]	[L1: 15.4596]	[L1: 27.3139]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.424 (Best: 23.313 @epoch 76)
Forward: 4.51s

Saving...
Total: 6.95s

[Epoch 78]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.4755]	[L1: 27.2561]	55.2+3.8s
[3200/15600]	[L1: 15.3328]	[L1: 27.1730]	55.1+0.2s
[4800/15600]	[L1: 15.4793]	[L1: 27.3394]	55.2+0.2s
[6400/15600]	[L1: 15.4741]	[L1: 27.3540]	54.8+0.2s
[8000/15600]	[L1: 15.3718]	[L1: 27.2463]	54.8+0.2s
[9600/15600]	[L1: 15.4083]	[L1: 27.2134]	55.0+0.2s
[11200/15600]	[L1: 15.4150]	[L1: 27.2055]	54.9+0.2s
[12800/15600]	[L1: 15.4231]	[L1: 27.1539]	55.2+0.2s
[14400/15600]	[L1: 15.4009]	[L1: 27.1248]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.015 (Best: 23.313 @epoch 76)
Forward: 4.82s

Saving...
Total: 7.35s

[Epoch 79]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.6016]	[L1: 27.4163]	54.9+1.1s
[3200/15600]	[L1: 15.2799]	[L1: 27.0423]	54.8+0.2s
[4800/15600]	[L1: 15.3621]	[L1: 27.0881]	54.8+0.2s
[6400/15600]	[L1: 15.4463]	[L1: 27.3041]	54.8+0.2s
[8000/15600]	[L1: 15.4969]	[L1: 27.2932]	54.8+0.2s
[9600/15600]	[L1: 15.4859]	[L1: 27.3079]	54.9+0.2s
[11200/15600]	[L1: 15.4401]	[L1: 27.2997]	54.8+0.2s
[12800/15600]	[L1: 15.4467]	[L1: 27.3048]	55.0+0.2s
[14400/15600]	[L1: 15.4063]	[L1: 27.2539]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.644 (Best: 23.313 @epoch 76)
Forward: 5.02s

Saving...
Total: 7.48s

[Epoch 80]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.7763]	[L1: 27.1913]	55.3+3.8s
[3200/15600]	[L1: 15.8516]	[L1: 27.3351]	55.1+0.2s
[4800/15600]	[L1: 15.7246]	[L1: 27.2201]	55.7+0.2s
[6400/15600]	[L1: 15.5872]	[L1: 27.1334]	56.7+0.2s
[8000/15600]	[L1: 15.5966]	[L1: 27.2272]	55.9+0.2s
[9600/15600]	[L1: 15.6525]	[L1: 27.2850]	55.9+0.2s
[11200/15600]	[L1: 15.6221]	[L1: 27.1977]	55.9+0.2s
[12800/15600]	[L1: 15.6356]	[L1: 27.3129]	56.4+2.0s
[14400/15600]	[L1: 15.6724]	[L1: 27.3492]	56.0+0.4s

Evaluation:
[SRRAW x4]	PSNR: 21.978 (Best: 23.313 @epoch 76)
Forward: 4.58s

Saving...
Total: 7.16s

[Epoch 81]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.5840]	[L1: 27.6786]	57.0+3.9s
[3200/15600]	[L1: 15.4288]	[L1: 27.4789]	56.0+0.8s
[4800/15600]	[L1: 15.3695]	[L1: 27.4571]	56.3+5.1s
[6400/15600]	[L1: 15.3843]	[L1: 27.3666]	56.3+2.2s
[8000/15600]	[L1: 15.3983]	[L1: 27.2917]	56.1+0.2s
[9600/15600]	[L1: 15.3639]	[L1: 27.2225]	56.2+7.9s
[11200/15600]	[L1: 15.3619]	[L1: 27.2158]	56.5+2.3s
[12800/15600]	[L1: 15.3874]	[L1: 27.2591]	56.0+4.4s
[14400/15600]	[L1: 15.4095]	[L1: 27.2775]	56.8+6.0s

Evaluation:
[SRRAW x4]	PSNR: 22.719 (Best: 23.313 @epoch 76)
Forward: 4.35s

Saving...
Total: 6.72s

[Epoch 82]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.6014]	[L1: 27.5475]	56.2+7.4s
[3200/15600]	[L1: 15.5210]	[L1: 27.4461]	56.5+1.7s
[4800/15600]	[L1: 15.4364]	[L1: 27.3344]	56.1+5.1s
[6400/15600]	[L1: 15.4868]	[L1: 27.2603]	55.9+0.2s
[8000/15600]	[L1: 15.4644]	[L1: 27.3064]	56.3+7.6s
[9600/15600]	[L1: 15.5359]	[L1: 27.3424]	56.2+4.7s
[11200/15600]	[L1: 15.5505]	[L1: 27.3746]	55.9+8.5s
[12800/15600]	[L1: 15.5899]	[L1: 27.3536]	56.4+6.4s
[14400/15600]	[L1: 15.6505]	[L1: 27.3937]	55.7+5.4s

Evaluation:
[SRRAW x4]	PSNR: 21.955 (Best: 23.313 @epoch 76)
Forward: 4.60s

Saving...
Total: 8.00s

[Epoch 83]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.2209]	[L1: 27.0209]	54.9+6.0s
[3200/15600]	[L1: 15.3771]	[L1: 27.1255]	55.3+0.2s
[4800/15600]	[L1: 15.3937]	[L1: 27.1585]	55.4+2.6s
[6400/15600]	[L1: 15.4533]	[L1: 27.2490]	56.0+2.3s
[8000/15600]	[L1: 15.4752]	[L1: 27.2223]	56.2+1.5s
[9600/15600]	[L1: 15.5361]	[L1: 27.2451]	56.1+0.8s
[11200/15600]	[L1: 15.5528]	[L1: 27.2756]	55.9+0.2s
[12800/15600]	[L1: 15.4939]	[L1: 27.2666]	56.0+0.2s
[14400/15600]	[L1: 15.4954]	[L1: 27.2406]	55.5+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.414 (Best: 23.313 @epoch 76)
Forward: 4.87s

Saving...
Total: 7.37s

[Epoch 84]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.7681]	[L1: 27.6831]	55.9+5.2s
[3200/15600]	[L1: 15.3249]	[L1: 27.1841]	56.5+6.9s
[4800/15600]	[L1: 15.3281]	[L1: 27.1861]	55.8+5.7s
[6400/15600]	[L1: 15.3162]	[L1: 27.0786]	56.3+6.9s
[8000/15600]	[L1: 15.4159]	[L1: 27.1198]	56.0+7.9s
[9600/15600]	[L1: 15.3802]	[L1: 27.1601]	57.1+7.7s
[11200/15600]	[L1: 15.3537]	[L1: 27.1561]	57.7+0.9s
[12800/15600]	[L1: 15.3641]	[L1: 27.1445]	56.2+8.4s
[14400/15600]	[L1: 15.2951]	[L1: 27.0764]	56.5+3.7s

Evaluation:
[SRRAW x4]	PSNR: 22.193 (Best: 23.313 @epoch 76)
Forward: 4.53s

Saving...
Total: 6.90s

[Epoch 85]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.4065]	[L1: 27.0171]	54.9+13.3s
[3200/15600]	[L1: 15.4567]	[L1: 26.9336]	55.0+2.7s
[4800/15600]	[L1: 15.6517]	[L1: 27.1684]	55.1+5.9s
[6400/15600]	[L1: 15.8232]	[L1: 27.3734]	55.1+6.2s
[8000/15600]	[L1: 15.8564]	[L1: 27.4316]	55.1+0.2s
[9600/15600]	[L1: 15.8353]	[L1: 27.4333]	55.2+2.4s
[11200/15600]	[L1: 15.7995]	[L1: 27.4282]	55.0+0.2s
[12800/15600]	[L1: 15.7409]	[L1: 27.4422]	55.1+0.2s
[14400/15600]	[L1: 15.6823]	[L1: 27.3849]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.585 (Best: 23.313 @epoch 76)
Forward: 3.97s

Saving...
Total: 7.39s

[Epoch 86]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.5391]	[L1: 27.5557]	55.3+5.9s
[3200/15600]	[L1: 15.4041]	[L1: 27.2489]	55.5+0.2s
[4800/15600]	[L1: 15.3996]	[L1: 27.2453]	55.3+0.4s
[6400/15600]	[L1: 15.1702]	[L1: 27.0464]	55.3+0.2s
[8000/15600]	[L1: 15.2370]	[L1: 27.0548]	55.8+3.7s
[9600/15600]	[L1: 15.2058]	[L1: 27.0215]	55.1+0.3s
[11200/15600]	[L1: 15.2220]	[L1: 27.0153]	55.1+0.2s
[12800/15600]	[L1: 15.2921]	[L1: 27.1377]	55.2+0.2s
[14400/15600]	[L1: 15.2678]	[L1: 27.0901]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.381 (Best: 23.313 @epoch 76)
Forward: 4.39s

Saving...
Total: 6.83s

[Epoch 87]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.4533]	[L1: 27.2312]	55.2+4.3s
[3200/15600]	[L1: 15.3215]	[L1: 27.3401]	55.0+0.2s
[4800/15600]	[L1: 15.2400]	[L1: 27.2449]	55.1+0.2s
[6400/15600]	[L1: 15.2731]	[L1: 27.1948]	55.4+0.2s
[8000/15600]	[L1: 15.2194]	[L1: 27.1259]	55.4+0.2s
[9600/15600]	[L1: 15.2095]	[L1: 27.0997]	55.0+0.2s
[11200/15600]	[L1: 15.1856]	[L1: 27.0559]	55.0+0.2s
[12800/15600]	[L1: 15.2256]	[L1: 27.0914]	55.0+0.3s
[14400/15600]	[L1: 15.2112]	[L1: 27.0816]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.559 (Best: 23.313 @epoch 76)
Forward: 4.43s

Saving...
Total: 7.07s

[Epoch 88]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.4880]	[L1: 27.8383]	55.2+2.9s
[3200/15600]	[L1: 15.5382]	[L1: 27.5615]	55.3+1.2s
[4800/15600]	[L1: 15.4981]	[L1: 27.3533]	54.9+0.2s
[6400/15600]	[L1: 15.4695]	[L1: 27.2343]	55.1+0.2s
[8000/15600]	[L1: 15.3640]	[L1: 27.1225]	55.1+0.2s
[9600/15600]	[L1: 15.3678]	[L1: 27.0287]	54.9+0.2s
[11200/15600]	[L1: 15.3574]	[L1: 27.0304]	54.8+0.2s
[12800/15600]	[L1: 15.3872]	[L1: 27.0908]	54.9+0.2s
[14400/15600]	[L1: 15.3455]	[L1: 27.0568]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.592 (Best: 23.313 @epoch 76)
Forward: 4.39s

Saving...
Total: 6.80s

[Epoch 89]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.1551]	[L1: 26.9390]	54.8+3.7s
[3200/15600]	[L1: 15.2805]	[L1: 27.2039]	55.3+0.2s
[4800/15600]	[L1: 15.3788]	[L1: 27.1713]	55.0+0.2s
[6400/15600]	[L1: 15.3724]	[L1: 27.2004]	55.1+0.2s
[8000/15600]	[L1: 15.4301]	[L1: 27.2650]	55.0+0.2s
[9600/15600]	[L1: 15.3957]	[L1: 27.2370]	55.0+0.2s
[11200/15600]	[L1: 15.3222]	[L1: 27.1762]	55.2+1.6s
[12800/15600]	[L1: 15.3144]	[L1: 27.1879]	54.9+0.2s
[14400/15600]	[L1: 15.3134]	[L1: 27.1564]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.017 (Best: 23.313 @epoch 76)
Forward: 4.74s

Saving...
Total: 7.14s

[Epoch 90]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.5413]	[L1: 27.4962]	54.9+3.1s
[3200/15600]	[L1: 15.4836]	[L1: 27.4885]	55.0+0.2s
[4800/15600]	[L1: 15.3258]	[L1: 27.1538]	54.9+0.2s
[6400/15600]	[L1: 15.2633]	[L1: 27.1666]	55.2+0.2s
[8000/15600]	[L1: 15.2899]	[L1: 27.1379]	54.9+0.2s
[9600/15600]	[L1: 15.2865]	[L1: 27.2269]	55.0+0.2s
[11200/15600]	[L1: 15.3020]	[L1: 27.2823]	54.7+0.2s
[12800/15600]	[L1: 15.3413]	[L1: 27.3124]	55.0+0.2s
[14400/15600]	[L1: 15.2732]	[L1: 27.2283]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.804 (Best: 23.313 @epoch 76)
Forward: 4.92s

Saving...
Total: 7.39s

[Epoch 91]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.0921]	[L1: 26.9250]	55.2+2.8s
[3200/15600]	[L1: 15.2950]	[L1: 26.9413]	55.2+2.3s
[4800/15600]	[L1: 15.1534]	[L1: 26.8003]	55.1+0.2s
[6400/15600]	[L1: 15.0949]	[L1: 26.6851]	55.1+0.2s
[8000/15600]	[L1: 15.0971]	[L1: 26.7556]	55.1+0.2s
[9600/15600]	[L1: 15.1315]	[L1: 26.8773]	55.0+0.2s
[11200/15600]	[L1: 15.1603]	[L1: 26.9349]	55.2+1.8s
[12800/15600]	[L1: 15.1696]	[L1: 26.9839]	55.2+0.2s
[14400/15600]	[L1: 15.1453]	[L1: 26.9716]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.112 (Best: 23.313 @epoch 76)
Forward: 4.28s

Saving...
Total: 6.79s

[Epoch 92]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.1931]	[L1: 27.3838]	55.4+2.7s
[3200/15600]	[L1: 15.1500]	[L1: 27.3121]	54.9+0.2s
[4800/15600]	[L1: 15.1906]	[L1: 27.2411]	54.9+0.2s
[6400/15600]	[L1: 15.1149]	[L1: 27.1886]	55.2+0.2s
[8000/15600]	[L1: 15.0338]	[L1: 26.9993]	54.8+0.2s
[9600/15600]	[L1: 15.0986]	[L1: 27.0456]	54.9+0.2s
[11200/15600]	[L1: 15.1252]	[L1: 27.0391]	55.1+0.2s
[12800/15600]	[L1: 15.1131]	[L1: 27.0433]	55.0+2.2s
[14400/15600]	[L1: 15.1066]	[L1: 27.0204]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.273 (Best: 23.313 @epoch 76)
Forward: 4.37s

Saving...
Total: 6.89s

[Epoch 93]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.1265]	[L1: 26.4816]	55.2+2.7s
[3200/15600]	[L1: 15.2330]	[L1: 27.0192]	55.2+0.2s
[4800/15600]	[L1: 15.1713]	[L1: 27.0624]	54.9+0.2s
[6400/15600]	[L1: 15.2260]	[L1: 27.0626]	54.8+0.2s
[8000/15600]	[L1: 15.2478]	[L1: 27.0603]	54.8+0.2s
[9600/15600]	[L1: 15.2070]	[L1: 27.0398]	55.0+0.2s
[11200/15600]	[L1: 15.2294]	[L1: 27.1032]	55.1+0.2s
[12800/15600]	[L1: 15.1903]	[L1: 27.0141]	54.8+0.2s
[14400/15600]	[L1: 15.1620]	[L1: 27.0204]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.150 (Best: 23.313 @epoch 76)
Forward: 4.71s

Saving...
Total: 7.08s

[Epoch 94]	Learning rate: 1.00e-4
[1600/15600]	[L1: 14.9895]	[L1: 26.7979]	55.1+2.6s
[3200/15600]	[L1: 14.9683]	[L1: 26.6650]	55.0+0.5s
[4800/15600]	[L1: 14.9579]	[L1: 26.7217]	54.9+0.2s
[6400/15600]	[L1: 15.0158]	[L1: 26.7989]	54.8+1.3s
[8000/15600]	[L1: 15.0663]	[L1: 26.9326]	54.9+1.0s
[9600/15600]	[L1: 15.1693]	[L1: 26.9407]	54.9+0.2s
[11200/15600]	[L1: 15.1948]	[L1: 26.9277]	54.8+0.2s
[12800/15600]	[L1: 15.1884]	[L1: 26.9149]	55.0+2.3s
[14400/15600]	[L1: 15.2444]	[L1: 26.9934]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.096 (Best: 23.313 @epoch 76)
Forward: 4.50s

Saving...
Total: 6.96s

[Epoch 95]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.1441]	[L1: 27.1172]	55.1+2.5s
[3200/15600]	[L1: 15.3326]	[L1: 27.2722]	55.2+0.2s
[4800/15600]	[L1: 15.3338]	[L1: 27.2434]	55.0+0.2s
[6400/15600]	[L1: 15.3010]	[L1: 27.1511]	54.7+0.2s
[8000/15600]	[L1: 15.3420]	[L1: 27.1273]	55.0+0.2s
[9600/15600]	[L1: 15.3084]	[L1: 27.0350]	55.0+0.2s
[11200/15600]	[L1: 15.3038]	[L1: 27.1046]	55.1+0.2s
[12800/15600]	[L1: 15.3072]	[L1: 27.1451]	54.8+0.2s
[14400/15600]	[L1: 15.3413]	[L1: 27.1902]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.281 (Best: 23.313 @epoch 76)
Forward: 4.11s

Saving...
Total: 6.63s

[Epoch 96]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.0715]	[L1: 27.3228]	55.1+4.0s
[3200/15600]	[L1: 15.1377]	[L1: 27.1908]	55.2+0.2s
[4800/15600]	[L1: 15.2270]	[L1: 27.1633]	55.0+0.2s
[6400/15600]	[L1: 15.2410]	[L1: 27.1278]	54.7+0.2s
[8000/15600]	[L1: 15.1598]	[L1: 27.0286]	55.1+0.2s
[9600/15600]	[L1: 15.2715]	[L1: 27.1464]	54.8+0.2s
[11200/15600]	[L1: 15.2336]	[L1: 27.0698]	55.0+0.2s
[12800/15600]	[L1: 15.2877]	[L1: 27.0740]	55.0+0.2s
[14400/15600]	[L1: 15.2693]	[L1: 27.0282]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.455 (Best: 23.313 @epoch 76)
Forward: 4.28s

Saving...
Total: 6.79s

[Epoch 97]	Learning rate: 1.00e-4
[1600/15600]	[L1: 14.8751]	[L1: 26.6558]	55.1+2.9s
[3200/15600]	[L1: 14.9958]	[L1: 26.6903]	55.1+0.2s
[4800/15600]	[L1: 15.0508]	[L1: 26.8847]	54.9+0.2s
[6400/15600]	[L1: 15.1039]	[L1: 26.9802]	55.0+0.2s
[8000/15600]	[L1: 15.1257]	[L1: 27.0147]	55.1+0.2s
[9600/15600]	[L1: 15.1192]	[L1: 27.0298]	55.1+0.7s
[11200/15600]	[L1: 15.1162]	[L1: 26.9940]	54.9+0.2s
[12800/15600]	[L1: 15.1498]	[L1: 26.9921]	55.0+0.2s
[14400/15600]	[L1: 15.2025]	[L1: 27.0399]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.692 (Best: 23.313 @epoch 76)
Forward: 4.79s

Saving...
Total: 7.19s

[Epoch 98]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.2916]	[L1: 27.2509]	54.9+4.7s
[3200/15600]	[L1: 15.4939]	[L1: 27.2939]	54.8+0.2s
[4800/15600]	[L1: 15.4483]	[L1: 27.2330]	54.8+1.0s
[6400/15600]	[L1: 15.3252]	[L1: 27.1298]	55.0+2.3s
[8000/15600]	[L1: 15.2712]	[L1: 27.1174]	55.1+0.2s
[9600/15600]	[L1: 15.2436]	[L1: 27.1213]	55.0+0.2s
[11200/15600]	[L1: 15.2217]	[L1: 27.0936]	55.1+0.2s
[12800/15600]	[L1: 15.1742]	[L1: 27.0833]	54.9+0.2s
[14400/15600]	[L1: 15.1388]	[L1: 27.1083]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.751 (Best: 23.313 @epoch 76)
Forward: 4.29s

Saving...
Total: 6.70s

[Epoch 99]	Learning rate: 1.00e-4
[1600/15600]	[L1: 15.1690]	[L1: 27.0961]	55.3+2.8s
[3200/15600]	[L1: 14.9983]	[L1: 26.9697]	55.3+0.2s
[4800/15600]	[L1: 15.1526]	[L1: 27.0873]	55.1+0.2s
[6400/15600]	[L1: 15.2312]	[L1: 27.1477]	55.0+0.2s
[8000/15600]	[L1: 15.1837]	[L1: 27.1107]	54.8+1.5s
[9600/15600]	[L1: 15.1805]	[L1: 27.0773]	55.1+0.2s
[11200/15600]	[L1: 15.1814]	[L1: 27.0843]	54.9+0.2s
[12800/15600]	[L1: 15.1991]	[L1: 27.1173]	55.2+0.2s
[14400/15600]	[L1: 15.1534]	[L1: 27.0554]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.843 (Best: 23.313 @epoch 76)
Forward: 4.82s

Saving...
Total: 7.47s

[Epoch 100]	Learning rate: 1.00e-4
[1600/15600]	[L1: 14.6045]	[L1: 26.6061]	55.0+4.5s
[3200/15600]	[L1: 14.7408]	[L1: 26.7475]	55.0+1.1s
[4800/15600]	[L1: 14.8374]	[L1: 26.8265]	55.2+0.2s
[6400/15600]	[L1: 14.8782]	[L1: 26.8070]	54.7+0.2s
[8000/15600]	[L1: 15.0553]	[L1: 26.9224]	54.8+0.2s
[9600/15600]	[L1: 15.0508]	[L1: 26.8756]	55.0+0.2s
[11200/15600]	[L1: 15.1270]	[L1: 26.9487]	54.9+0.2s
[12800/15600]	[L1: 15.1675]	[L1: 26.9906]	55.0+0.2s
[14400/15600]	[L1: 15.1549]	[L1: 27.0083]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.041 (Best: 23.313 @epoch 76)
Forward: 4.47s

Saving...
Total: 6.88s

[Epoch 101]	Learning rate: 2.50e-5
[1600/15600]	[L1: 14.7968]	[L1: 26.7154]	55.0+4.5s
[3200/15600]	[L1: 14.7474]	[L1: 26.7797]	55.0+0.2s
[4800/15600]	[L1: 14.8114]	[L1: 26.6860]	55.1+0.2s
[6400/15600]	[L1: 14.8699]	[L1: 26.8419]	55.0+0.2s
[8000/15600]	[L1: 14.7646]	[L1: 26.8034]	55.2+0.2s
[9600/15600]	[L1: 14.7275]	[L1: 26.8086]	55.0+0.2s
[11200/15600]	[L1: 14.6686]	[L1: 26.7422]	55.1+0.2s
[12800/15600]	[L1: 14.6121]	[L1: 26.6902]	54.9+0.2s
[14400/15600]	[L1: 14.6720]	[L1: 26.6988]	55.2+0.4s

Evaluation:
[SRRAW x4]	PSNR: 23.460 (Best: 23.460 @epoch 101)
Forward: 4.71s

Saving...
Total: 7.39s

[Epoch 102]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.6285]	[L1: 26.8543]	55.1+3.9s
[3200/15600]	[L1: 14.4660]	[L1: 26.7239]	55.0+0.2s
[4800/15600]	[L1: 14.5147]	[L1: 26.6952]	55.3+0.2s
[6400/15600]	[L1: 14.5033]	[L1: 26.7601]	54.7+0.2s
[8000/15600]	[L1: 14.4732]	[L1: 26.6367]	54.8+0.2s
[9600/15600]	[L1: 14.4960]	[L1: 26.7170]	55.1+3.7s
[11200/15600]	[L1: 14.4664]	[L1: 26.7024]	55.0+0.2s
[12800/15600]	[L1: 14.4556]	[L1: 26.6261]	55.1+0.2s
[14400/15600]	[L1: 14.4198]	[L1: 26.6398]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.188 (Best: 23.460 @epoch 101)
Forward: 4.30s

Saving...
Total: 6.74s

[Epoch 103]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.3657]	[L1: 26.7585]	55.1+5.4s
[3200/15600]	[L1: 14.3412]	[L1: 26.6340]	55.1+0.2s
[4800/15600]	[L1: 14.3145]	[L1: 26.4057]	55.0+0.6s
[6400/15600]	[L1: 14.2996]	[L1: 26.5501]	54.9+0.2s
[8000/15600]	[L1: 14.2487]	[L1: 26.5837]	55.0+0.2s
[9600/15600]	[L1: 14.2469]	[L1: 26.5536]	55.2+0.2s
[11200/15600]	[L1: 14.2632]	[L1: 26.5956]	55.0+0.2s
[12800/15600]	[L1: 14.2858]	[L1: 26.6026]	55.0+0.2s
[14400/15600]	[L1: 14.2552]	[L1: 26.5254]	54.9+1.7s

Evaluation:
[SRRAW x4]	PSNR: 23.154 (Best: 23.460 @epoch 101)
Forward: 4.51s

Saving...
Total: 7.06s

[Epoch 104]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.0440]	[L1: 25.9260]	55.0+6.6s
[3200/15600]	[L1: 14.1200]	[L1: 26.3245]	55.1+0.2s
[4800/15600]	[L1: 14.1556]	[L1: 26.4677]	55.0+0.2s
[6400/15600]	[L1: 14.1895]	[L1: 26.4570]	55.1+0.2s
[8000/15600]	[L1: 14.3414]	[L1: 26.6267]	55.1+0.2s
[9600/15600]	[L1: 14.3615]	[L1: 26.6329]	55.1+0.2s
[11200/15600]	[L1: 14.3318]	[L1: 26.5640]	54.8+0.2s
[12800/15600]	[L1: 14.3495]	[L1: 26.5241]	54.8+0.2s
[14400/15600]	[L1: 14.3482]	[L1: 26.5122]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.807 (Best: 23.460 @epoch 101)
Forward: 4.90s

Saving...
Total: 7.32s

[Epoch 105]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.1919]	[L1: 26.7100]	55.3+3.6s
[3200/15600]	[L1: 14.0770]	[L1: 26.4417]	55.0+0.2s
[4800/15600]	[L1: 14.0724]	[L1: 26.3785]	55.0+0.2s
[6400/15600]	[L1: 14.0759]	[L1: 26.3740]	54.8+0.2s
[8000/15600]	[L1: 14.1065]	[L1: 26.4837]	54.8+1.2s
[9600/15600]	[L1: 14.1593]	[L1: 26.4809]	55.1+0.2s
[11200/15600]	[L1: 14.1806]	[L1: 26.5262]	55.1+0.2s
[12800/15600]	[L1: 14.1699]	[L1: 26.5201]	55.1+0.2s
[14400/15600]	[L1: 14.1657]	[L1: 26.4371]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.117 (Best: 23.460 @epoch 101)
Forward: 4.67s

Saving...
Total: 7.09s

[Epoch 106]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.0136]	[L1: 27.0869]	55.2+2.9s
[3200/15600]	[L1: 14.2027]	[L1: 26.9846]	55.1+0.3s
[4800/15600]	[L1: 14.1538]	[L1: 26.8191]	55.1+0.2s
[6400/15600]	[L1: 14.1521]	[L1: 26.7010]	55.0+0.3s
[8000/15600]	[L1: 14.1239]	[L1: 26.6638]	54.9+0.2s
[9600/15600]	[L1: 14.0902]	[L1: 26.6053]	55.0+0.2s
[11200/15600]	[L1: 14.1477]	[L1: 26.6036]	54.9+0.2s
[12800/15600]	[L1: 14.1722]	[L1: 26.5830]	55.0+0.2s
[14400/15600]	[L1: 14.1628]	[L1: 26.5504]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.486 (Best: 23.486 @epoch 106)
Forward: 4.47s

Saving...
Total: 8.20s

[Epoch 107]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.0172]	[L1: 25.7836]	54.9+5.0s
[3200/15600]	[L1: 14.1960]	[L1: 26.0438]	54.8+0.2s
[4800/15600]	[L1: 14.1125]	[L1: 26.2535]	55.2+0.2s
[6400/15600]	[L1: 14.0805]	[L1: 26.1595]	54.8+0.2s
[8000/15600]	[L1: 14.1246]	[L1: 26.2439]	54.9+0.2s
[9600/15600]	[L1: 14.0989]	[L1: 26.2583]	55.2+0.2s
[11200/15600]	[L1: 14.0837]	[L1: 26.2512]	55.3+1.1s
[12800/15600]	[L1: 14.0766]	[L1: 26.3148]	55.0+0.2s
[14400/15600]	[L1: 14.0689]	[L1: 26.3260]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.915 (Best: 23.486 @epoch 106)
Forward: 4.20s

Saving...
Total: 7.61s

[Epoch 108]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.8314]	[L1: 27.1721]	55.2+2.8s
[3200/15600]	[L1: 14.5173]	[L1: 26.8483]	55.0+3.6s
[4800/15600]	[L1: 14.3766]	[L1: 26.6184]	54.9+0.2s
[6400/15600]	[L1: 14.3486]	[L1: 26.6680]	54.8+0.2s
[8000/15600]	[L1: 14.3058]	[L1: 26.6265]	55.0+0.2s
[9600/15600]	[L1: 14.2859]	[L1: 26.5375]	54.9+0.2s
[11200/15600]	[L1: 14.2833]	[L1: 26.5670]	55.0+0.2s
[12800/15600]	[L1: 14.2574]	[L1: 26.5344]	54.8+0.2s
[14400/15600]	[L1: 14.2273]	[L1: 26.5282]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.227 (Best: 23.486 @epoch 106)
Forward: 4.35s

Saving...
Total: 6.70s

[Epoch 109]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.8047]	[L1: 26.1138]	55.4+3.7s
[3200/15600]	[L1: 14.0304]	[L1: 26.2367]	55.0+0.2s
[4800/15600]	[L1: 14.0689]	[L1: 26.4468]	55.0+0.2s
[6400/15600]	[L1: 14.0238]	[L1: 26.4326]	55.1+0.2s
[8000/15600]	[L1: 14.0369]	[L1: 26.4611]	55.1+0.2s
[9600/15600]	[L1: 14.0495]	[L1: 26.5337]	55.1+0.2s
[11200/15600]	[L1: 14.0968]	[L1: 26.5676]	54.9+0.2s
[12800/15600]	[L1: 14.1255]	[L1: 26.5435]	54.8+1.2s
[14400/15600]	[L1: 14.1241]	[L1: 26.5140]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.833 (Best: 23.486 @epoch 106)
Forward: 4.62s

Saving...
Total: 7.13s

[Epoch 110]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.4045]	[L1: 27.3874]	55.1+2.9s
[3200/15600]	[L1: 14.1682]	[L1: 26.8985]	55.1+0.2s
[4800/15600]	[L1: 14.0356]	[L1: 26.6225]	55.0+0.2s
[6400/15600]	[L1: 13.9529]	[L1: 26.4419]	54.8+0.2s
[8000/15600]	[L1: 13.9806]	[L1: 26.4280]	54.8+0.2s
[9600/15600]	[L1: 13.9904]	[L1: 26.3630]	54.8+0.2s
[11200/15600]	[L1: 14.0054]	[L1: 26.3904]	54.9+0.2s
[12800/15600]	[L1: 13.9977]	[L1: 26.3687]	55.7+0.2s
[14400/15600]	[L1: 13.9883]	[L1: 26.3664]	55.2+0.9s

Evaluation:
[SRRAW x4]	PSNR: 23.032 (Best: 23.486 @epoch 106)
Forward: 4.78s

Saving...
Total: 7.34s

[Epoch 111]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.2747]	[L1: 26.5640]	54.9+2.7s
[3200/15600]	[L1: 14.2270]	[L1: 26.6492]	55.1+0.2s
[4800/15600]	[L1: 14.2002]	[L1: 26.6310]	55.1+0.2s
[6400/15600]	[L1: 14.1597]	[L1: 26.5172]	54.8+0.2s
[8000/15600]	[L1: 14.3141]	[L1: 26.6278]	54.7+0.2s
[9600/15600]	[L1: 14.2963]	[L1: 26.6108]	54.7+0.2s
[11200/15600]	[L1: 14.2694]	[L1: 26.5755]	54.8+0.2s
[12800/15600]	[L1: 14.3122]	[L1: 26.5971]	55.1+0.2s
[14400/15600]	[L1: 14.2685]	[L1: 26.6059]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.463 (Best: 23.486 @epoch 106)
Forward: 3.93s

Saving...
Total: 7.33s

[Epoch 112]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.3755]	[L1: 27.1137]	55.2+2.1s
[3200/15600]	[L1: 13.9650]	[L1: 26.6190]	55.2+0.2s
[4800/15600]	[L1: 13.9664]	[L1: 26.4218]	54.9+0.5s
[6400/15600]	[L1: 13.8881]	[L1: 26.2710]	54.8+0.2s
[8000/15600]	[L1: 13.9825]	[L1: 26.3626]	54.8+0.2s
[9600/15600]	[L1: 13.9694]	[L1: 26.3692]	55.1+0.2s
[11200/15600]	[L1: 13.9701]	[L1: 26.3244]	54.8+0.2s
[12800/15600]	[L1: 14.0061]	[L1: 26.3572]	54.8+1.4s
[14400/15600]	[L1: 14.0115]	[L1: 26.4105]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.361 (Best: 23.486 @epoch 106)
Forward: 4.87s

Saving...
Total: 7.45s

[Epoch 113]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.8028]	[L1: 26.1443]	55.1+4.7s
[3200/15600]	[L1: 13.8692]	[L1: 26.2472]	55.0+0.2s
[4800/15600]	[L1: 13.9265]	[L1: 26.2389]	55.2+0.2s
[6400/15600]	[L1: 13.9569]	[L1: 26.3220]	55.3+0.2s
[8000/15600]	[L1: 13.9483]	[L1: 26.2618]	55.1+0.2s
[9600/15600]	[L1: 13.9456]	[L1: 26.2979]	54.8+0.2s
[11200/15600]	[L1: 13.9663]	[L1: 26.2956]	54.9+0.2s
[12800/15600]	[L1: 13.9096]	[L1: 26.2403]	55.0+2.4s
[14400/15600]	[L1: 13.9380]	[L1: 26.2846]	55.2+1.9s

Evaluation:
[SRRAW x4]	PSNR: 23.433 (Best: 23.486 @epoch 106)
Forward: 4.22s

Saving...
Total: 7.81s

[Epoch 114]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.2573]	[L1: 26.3669]	55.0+5.9s
[3200/15600]	[L1: 14.3401]	[L1: 26.5325]	55.2+0.2s
[4800/15600]	[L1: 14.2837]	[L1: 26.6746]	55.2+0.2s
[6400/15600]	[L1: 14.1313]	[L1: 26.5010]	55.0+0.2s
[8000/15600]	[L1: 14.0637]	[L1: 26.4331]	54.8+0.2s
[9600/15600]	[L1: 14.0616]	[L1: 26.4023]	55.1+0.2s
[11200/15600]	[L1: 14.0610]	[L1: 26.3880]	55.1+1.5s
[12800/15600]	[L1: 14.0214]	[L1: 26.3401]	55.1+0.2s
[14400/15600]	[L1: 14.0085]	[L1: 26.3106]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.164 (Best: 23.486 @epoch 106)
Forward: 4.83s

Saving...
Total: 7.39s

[Epoch 115]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.6750]	[L1: 27.2627]	55.4+4.2s
[3200/15600]	[L1: 14.3691]	[L1: 26.7927]	55.2+0.9s
[4800/15600]	[L1: 14.1638]	[L1: 26.5434]	55.0+0.2s
[6400/15600]	[L1: 14.1590]	[L1: 26.5488]	55.1+0.2s
[8000/15600]	[L1: 14.0699]	[L1: 26.4463]	55.0+0.2s
[9600/15600]	[L1: 14.0361]	[L1: 26.3867]	55.0+0.6s
[11200/15600]	[L1: 14.0396]	[L1: 26.3941]	55.0+0.7s
[12800/15600]	[L1: 14.0475]	[L1: 26.3907]	55.1+0.2s
[14400/15600]	[L1: 14.0579]	[L1: 26.4015]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.300 (Best: 23.486 @epoch 106)
Forward: 4.54s

Saving...
Total: 7.04s

[Epoch 116]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.0598]	[L1: 25.9931]	55.1+5.5s
[3200/15600]	[L1: 14.0915]	[L1: 26.1068]	55.1+0.2s
[4800/15600]	[L1: 14.0806]	[L1: 26.3537]	55.2+0.2s
[6400/15600]	[L1: 14.0514]	[L1: 26.3996]	55.1+0.2s
[8000/15600]	[L1: 14.0637]	[L1: 26.3747]	55.1+0.9s
[9600/15600]	[L1: 14.0334]	[L1: 26.3656]	55.0+0.2s
[11200/15600]	[L1: 14.0436]	[L1: 26.3633]	55.1+0.2s
[12800/15600]	[L1: 14.0320]	[L1: 26.3864]	55.1+0.2s
[14400/15600]	[L1: 14.0244]	[L1: 26.3722]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.315 (Best: 23.486 @epoch 106)
Forward: 4.66s

Saving...
Total: 7.06s

[Epoch 117]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.9556]	[L1: 26.3041]	55.3+4.1s
[3200/15600]	[L1: 13.7934]	[L1: 26.0533]	54.9+0.2s
[4800/15600]	[L1: 13.9242]	[L1: 26.1384]	55.1+0.6s
[6400/15600]	[L1: 13.9185]	[L1: 26.1823]	55.3+0.2s
[8000/15600]	[L1: 13.9299]	[L1: 26.2656]	55.3+0.2s
[9600/15600]	[L1: 13.9677]	[L1: 26.2864]	55.1+0.2s
[11200/15600]	[L1: 13.9698]	[L1: 26.3077]	55.1+0.2s
[12800/15600]	[L1: 13.9764]	[L1: 26.3470]	55.1+0.2s
[14400/15600]	[L1: 13.9694]	[L1: 26.3657]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.330 (Best: 23.486 @epoch 106)
Forward: 4.46s

Saving...
Total: 7.09s

[Epoch 118]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.8698]	[L1: 26.4581]	54.8+2.3s
[3200/15600]	[L1: 13.8811]	[L1: 26.3882]	55.2+3.7s
[4800/15600]	[L1: 13.9313]	[L1: 26.4431]	55.1+0.2s
[6400/15600]	[L1: 13.9088]	[L1: 26.4817]	55.1+0.2s
[8000/15600]	[L1: 13.9018]	[L1: 26.4019]	55.0+0.2s
[9600/15600]	[L1: 13.8295]	[L1: 26.3229]	55.1+0.2s
[11200/15600]	[L1: 13.8328]	[L1: 26.2909]	54.9+0.2s
[12800/15600]	[L1: 13.8828]	[L1: 26.3307]	54.8+0.2s
[14400/15600]	[L1: 13.8728]	[L1: 26.3262]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.139 (Best: 23.486 @epoch 106)
Forward: 4.58s

Saving...
Total: 7.01s

[Epoch 119]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.8643]	[L1: 26.1917]	55.0+5.4s
[3200/15600]	[L1: 13.7788]	[L1: 25.9746]	55.1+0.2s
[4800/15600]	[L1: 13.8502]	[L1: 26.0840]	55.0+0.2s
[6400/15600]	[L1: 13.7615]	[L1: 25.8884]	55.1+0.2s
[8000/15600]	[L1: 13.8791]	[L1: 25.9894]	55.0+0.2s
[9600/15600]	[L1: 13.9067]	[L1: 26.1050]	54.9+0.2s
[11200/15600]	[L1: 13.9001]	[L1: 26.1400]	55.0+0.2s
[12800/15600]	[L1: 13.8930]	[L1: 26.1515]	54.8+0.2s
[14400/15600]	[L1: 13.8840]	[L1: 26.1673]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.455 (Best: 23.486 @epoch 106)
Forward: 4.78s

Saving...
Total: 8.28s

[Epoch 120]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.9278]	[L1: 26.3911]	55.1+3.0s
[3200/15600]	[L1: 13.8579]	[L1: 26.3391]	55.1+0.9s
[4800/15600]	[L1: 13.8040]	[L1: 26.3083]	54.8+0.2s
[6400/15600]	[L1: 13.8512]	[L1: 26.1957]	54.8+0.2s
[8000/15600]	[L1: 13.8239]	[L1: 26.0786]	55.0+0.2s
[9600/15600]	[L1: 13.9043]	[L1: 26.2223]	54.9+0.8s
[11200/15600]	[L1: 13.8851]	[L1: 26.2311]	54.9+0.2s
[12800/15600]	[L1: 13.8931]	[L1: 26.2901]	55.0+0.2s
[14400/15600]	[L1: 13.8948]	[L1: 26.3144]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.508 (Best: 23.508 @epoch 120)
Forward: 4.43s

Saving...
Total: 6.87s

[Epoch 121]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4915]	[L1: 25.7885]	55.2+4.1s
[3200/15600]	[L1: 13.6232]	[L1: 26.0263]	54.9+0.2s
[4800/15600]	[L1: 13.5542]	[L1: 26.0381]	54.9+0.2s
[6400/15600]	[L1: 13.6958]	[L1: 26.1605]	54.9+0.2s
[8000/15600]	[L1: 13.7377]	[L1: 26.1840]	54.8+0.2s
[9600/15600]	[L1: 13.7868]	[L1: 26.2348]	55.1+0.2s
[11200/15600]	[L1: 13.8195]	[L1: 26.2387]	54.8+0.2s
[12800/15600]	[L1: 13.8174]	[L1: 26.2419]	54.9+2.0s
[14400/15600]	[L1: 13.8091]	[L1: 26.2125]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.350 (Best: 23.508 @epoch 120)
Forward: 4.25s

Saving...
Total: 7.83s

[Epoch 122]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4952]	[L1: 25.6630]	55.1+4.3s
[3200/15600]	[L1: 13.4829]	[L1: 25.7836]	55.0+0.2s
[4800/15600]	[L1: 13.5446]	[L1: 25.8927]	55.1+0.2s
[6400/15600]	[L1: 13.6957]	[L1: 26.0127]	55.1+0.2s
[8000/15600]	[L1: 13.7649]	[L1: 26.1174]	55.0+0.2s
[9600/15600]	[L1: 13.8526]	[L1: 26.1457]	55.1+0.2s
[11200/15600]	[L1: 13.9478]	[L1: 26.2531]	55.1+0.2s
[12800/15600]	[L1: 13.9502]	[L1: 26.2704]	55.2+0.2s
[14400/15600]	[L1: 13.9360]	[L1: 26.2725]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.299 (Best: 23.508 @epoch 120)
Forward: 4.30s

Saving...
Total: 6.74s

[Epoch 123]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.1369]	[L1: 26.4466]	55.1+4.5s
[3200/15600]	[L1: 13.9424]	[L1: 26.2480]	55.0+0.2s
[4800/15600]	[L1: 13.9073]	[L1: 26.0491]	54.9+0.2s
[6400/15600]	[L1: 13.9132]	[L1: 26.1935]	55.2+0.2s
[8000/15600]	[L1: 13.9208]	[L1: 26.2021]	55.0+4.7s
[9600/15600]	[L1: 13.9110]	[L1: 26.1971]	55.0+0.2s
[11200/15600]	[L1: 13.9126]	[L1: 26.2475]	54.9+0.2s
[12800/15600]	[L1: 13.8975]	[L1: 26.2138]	54.7+0.2s
[14400/15600]	[L1: 13.8743]	[L1: 26.1928]	55.3+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.008 (Best: 23.508 @epoch 120)
Forward: 4.39s

Saving...
Total: 6.82s

[Epoch 124]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.7221]	[L1: 25.9057]	55.2+3.6s
[3200/15600]	[L1: 13.8934]	[L1: 25.9976]	54.9+0.2s
[4800/15600]	[L1: 13.9216]	[L1: 26.1076]	54.8+0.2s
[6400/15600]	[L1: 13.9405]	[L1: 26.2612]	54.8+0.2s
[8000/15600]	[L1: 13.8988]	[L1: 26.2652]	54.9+0.2s
[9600/15600]	[L1: 13.8442]	[L1: 26.2188]	55.0+0.2s
[11200/15600]	[L1: 13.8428]	[L1: 26.2395]	54.9+0.2s
[12800/15600]	[L1: 13.8409]	[L1: 26.1588]	54.8+0.2s
[14400/15600]	[L1: 13.8580]	[L1: 26.1609]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.253 (Best: 23.508 @epoch 120)
Forward: 4.70s

Saving...
Total: 7.16s

[Epoch 125]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.1806]	[L1: 26.4705]	55.3+4.9s
[3200/15600]	[L1: 13.9724]	[L1: 26.3970]	55.2+0.2s
[4800/15600]	[L1: 13.8419]	[L1: 26.1840]	55.0+0.2s
[6400/15600]	[L1: 13.8006]	[L1: 26.1404]	55.0+0.2s
[8000/15600]	[L1: 13.8184]	[L1: 26.1642]	54.8+0.2s
[9600/15600]	[L1: 13.8750]	[L1: 26.2193]	54.9+0.2s
[11200/15600]	[L1: 13.8652]	[L1: 26.2112]	55.0+0.2s
[12800/15600]	[L1: 13.8348]	[L1: 26.2454]	54.7+0.2s
[14400/15600]	[L1: 13.8124]	[L1: 26.1640]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.963 (Best: 23.508 @epoch 120)
Forward: 4.91s

Saving...
Total: 7.46s

[Epoch 126]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.9470]	[L1: 26.1279]	55.0+5.1s
[3200/15600]	[L1: 13.7130]	[L1: 26.0279]	55.2+0.2s
[4800/15600]	[L1: 13.7192]	[L1: 26.1670]	54.8+0.2s
[6400/15600]	[L1: 13.7430]	[L1: 26.1976]	55.1+0.2s
[8000/15600]	[L1: 13.6927]	[L1: 26.1602]	54.8+0.2s
[9600/15600]	[L1: 13.7110]	[L1: 26.2255]	54.8+1.0s
[11200/15600]	[L1: 13.7118]	[L1: 26.1695]	54.9+0.2s
[12800/15600]	[L1: 13.7202]	[L1: 26.1717]	55.1+0.2s
[14400/15600]	[L1: 13.7519]	[L1: 26.1948]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.059 (Best: 23.508 @epoch 120)
Forward: 4.57s

Saving...
Total: 7.06s

[Epoch 127]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5362]	[L1: 25.5251]	55.0+4.3s
[3200/15600]	[L1: 13.7819]	[L1: 25.9795]	55.1+0.2s
[4800/15600]	[L1: 13.6816]	[L1: 25.9370]	55.2+0.2s
[6400/15600]	[L1: 13.7436]	[L1: 26.1378]	55.2+0.2s
[8000/15600]	[L1: 13.6798]	[L1: 26.1603]	55.4+0.2s
[9600/15600]	[L1: 13.6469]	[L1: 26.2066]	54.8+0.2s
[11200/15600]	[L1: 13.7737]	[L1: 26.3387]	55.1+0.2s
[12800/15600]	[L1: 13.7846]	[L1: 26.2820]	55.1+0.2s
[14400/15600]	[L1: 13.7533]	[L1: 26.2933]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.301 (Best: 23.508 @epoch 120)
Forward: 4.27s

Saving...
Total: 6.69s

[Epoch 128]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.4090]	[L1: 26.6169]	54.9+4.7s
[3200/15600]	[L1: 14.2219]	[L1: 26.5872]	54.9+0.2s
[4800/15600]	[L1: 14.0226]	[L1: 26.4752]	54.9+0.2s
[6400/15600]	[L1: 13.9053]	[L1: 26.3212]	54.9+0.2s
[8000/15600]	[L1: 13.8372]	[L1: 26.1796]	55.1+1.9s
[9600/15600]	[L1: 13.8095]	[L1: 26.1783]	54.9+0.2s
[11200/15600]	[L1: 13.8473]	[L1: 26.2648]	55.0+0.2s
[12800/15600]	[L1: 13.8474]	[L1: 26.3072]	54.9+0.2s
[14400/15600]	[L1: 13.8442]	[L1: 26.2537]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 22.905 (Best: 23.508 @epoch 120)
Forward: 4.64s

Saving...
Total: 7.20s

[Epoch 129]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.1826]	[L1: 26.5391]	55.1+4.5s
[3200/15600]	[L1: 13.8446]	[L1: 26.4011]	55.0+0.2s
[4800/15600]	[L1: 13.8142]	[L1: 26.2484]	55.1+0.2s
[6400/15600]	[L1: 13.7397]	[L1: 26.2567]	55.0+0.2s
[8000/15600]	[L1: 13.7206]	[L1: 26.2548]	55.0+0.2s
[9600/15600]	[L1: 13.7350]	[L1: 26.2358]	55.0+0.2s
[11200/15600]	[L1: 13.7274]	[L1: 26.2040]	54.8+0.2s
[12800/15600]	[L1: 13.7228]	[L1: 26.1834]	55.0+0.2s
[14400/15600]	[L1: 13.7397]	[L1: 26.1710]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.290 (Best: 23.508 @epoch 120)
Forward: 4.51s

Saving...
Total: 6.90s

[Epoch 130]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.7134]	[L1: 26.4060]	54.9+5.0s
[3200/15600]	[L1: 13.7153]	[L1: 26.2795]	54.9+0.2s
[4800/15600]	[L1: 13.7992]	[L1: 26.2503]	54.9+0.2s
[6400/15600]	[L1: 13.8060]	[L1: 26.2932]	55.0+0.2s
[8000/15600]	[L1: 13.8807]	[L1: 26.3542]	54.9+0.2s
[9600/15600]	[L1: 13.8361]	[L1: 26.3048]	54.9+0.2s
[11200/15600]	[L1: 13.9582]	[L1: 26.3500]	55.0+0.2s
[12800/15600]	[L1: 14.0140]	[L1: 26.3890]	54.9+0.2s
[14400/15600]	[L1: 14.0795]	[L1: 26.3938]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.461 (Best: 23.508 @epoch 120)
Forward: 4.75s

Saving...
Total: 7.28s

[Epoch 131]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.6116]	[L1: 25.4897]	55.3+7.5s
[3200/15600]	[L1: 13.5475]	[L1: 25.8136]	55.2+0.2s
[4800/15600]	[L1: 13.6548]	[L1: 25.8628]	55.2+0.2s
[6400/15600]	[L1: 13.7033]	[L1: 25.8749]	55.1+0.2s
[8000/15600]	[L1: 13.6875]	[L1: 25.9894]	55.1+0.2s
[9600/15600]	[L1: 13.6840]	[L1: 25.9708]	55.0+0.2s
[11200/15600]	[L1: 13.7512]	[L1: 26.0268]	54.8+0.2s
[12800/15600]	[L1: 13.7659]	[L1: 26.0570]	54.8+0.2s
[14400/15600]	[L1: 13.7496]	[L1: 26.0648]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.245 (Best: 23.508 @epoch 120)
Forward: 4.09s

Saving...
Total: 7.54s

[Epoch 132]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.8797]	[L1: 26.4617]	55.0+2.2s
[3200/15600]	[L1: 13.8909]	[L1: 26.3268]	54.8+0.2s
[4800/15600]	[L1: 13.8409]	[L1: 26.2847]	55.0+0.2s
[6400/15600]	[L1: 13.8439]	[L1: 26.3258]	55.1+0.2s
[8000/15600]	[L1: 13.8282]	[L1: 26.3220]	55.2+0.2s
[9600/15600]	[L1: 13.8200]	[L1: 26.3109]	55.1+0.2s
[11200/15600]	[L1: 13.8401]	[L1: 26.2959]	55.0+0.2s
[12800/15600]	[L1: 13.8158]	[L1: 26.2869]	54.9+0.2s
[14400/15600]	[L1: 13.8017]	[L1: 26.2954]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.167 (Best: 23.508 @epoch 120)
Forward: 4.51s

Saving...
Total: 8.06s

[Epoch 133]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.6614]	[L1: 25.7651]	54.9+5.6s
[3200/15600]	[L1: 13.6030]	[L1: 25.9054]	55.0+0.2s
[4800/15600]	[L1: 13.6432]	[L1: 26.0828]	55.1+0.2s
[6400/15600]	[L1: 13.6990]	[L1: 26.1584]	54.9+0.2s
[8000/15600]	[L1: 13.7534]	[L1: 26.1611]	55.0+0.2s
[9600/15600]	[L1: 13.7911]	[L1: 26.1853]	54.9+0.2s
[11200/15600]	[L1: 13.7285]	[L1: 26.1494]	55.0+0.2s
[12800/15600]	[L1: 13.6798]	[L1: 26.0986]	55.2+0.2s
[14400/15600]	[L1: 13.7171]	[L1: 26.1929]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.479 (Best: 23.508 @epoch 120)
Forward: 4.71s

Saving...
Total: 7.15s

[Epoch 134]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5100]	[L1: 26.0264]	55.2+3.1s
[3200/15600]	[L1: 13.5300]	[L1: 26.1045]	54.9+0.2s
[4800/15600]	[L1: 13.5202]	[L1: 26.0386]	55.0+0.2s
[6400/15600]	[L1: 13.6539]	[L1: 26.1099]	55.2+1.5s
[8000/15600]	[L1: 13.6837]	[L1: 26.2184]	55.0+0.2s
[9600/15600]	[L1: 13.6850]	[L1: 26.1902]	54.7+0.2s
[11200/15600]	[L1: 13.7174]	[L1: 26.2546]	54.8+0.2s
[12800/15600]	[L1: 13.7205]	[L1: 26.2255]	55.1+0.2s
[14400/15600]	[L1: 13.7295]	[L1: 26.1985]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.478 (Best: 23.508 @epoch 120)
Forward: 4.52s

Saving...
Total: 7.94s

[Epoch 135]	Learning rate: 5.00e-5
[1600/15600]	[L1: 14.0194]	[L1: 26.8280]	55.1+4.7s
[3200/15600]	[L1: 13.8315]	[L1: 26.5966]	55.1+0.2s
[4800/15600]	[L1: 13.6371]	[L1: 26.2470]	54.9+0.2s
[6400/15600]	[L1: 13.6843]	[L1: 26.1154]	55.1+0.2s
[8000/15600]	[L1: 13.6295]	[L1: 26.0123]	55.3+0.2s
[9600/15600]	[L1: 13.6087]	[L1: 25.9647]	55.1+0.2s
[11200/15600]	[L1: 13.6496]	[L1: 26.0040]	55.0+0.2s
[12800/15600]	[L1: 13.6458]	[L1: 26.0201]	54.9+0.2s
[14400/15600]	[L1: 13.6149]	[L1: 25.9846]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.314 (Best: 23.508 @epoch 120)
Forward: 4.51s

Saving...
Total: 6.93s

[Epoch 136]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.6538]	[L1: 26.3981]	55.3+1.5s
[3200/15600]	[L1: 13.6845]	[L1: 26.3384]	54.8+0.2s
[4800/15600]	[L1: 13.6695]	[L1: 26.3675]	55.1+0.2s
[6400/15600]	[L1: 13.5847]	[L1: 26.3153]	55.1+0.2s
[8000/15600]	[L1: 13.5447]	[L1: 26.1942]	55.1+0.2s
[9600/15600]	[L1: 13.5410]	[L1: 26.2061]	55.3+0.2s
[11200/15600]	[L1: 13.5609]	[L1: 26.1823]	55.1+0.2s
[12800/15600]	[L1: 13.5774]	[L1: 26.2115]	55.0+0.2s
[14400/15600]	[L1: 13.5780]	[L1: 26.1903]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.547 (Best: 23.547 @epoch 136)
Forward: 4.16s

Saving...
Total: 6.82s

[Epoch 137]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.8586]	[L1: 26.5763]	54.9+1.2s
[3200/15600]	[L1: 13.6390]	[L1: 26.2858]	55.2+0.2s
[4800/15600]	[L1: 13.6091]	[L1: 26.1039]	55.0+1.2s
[6400/15600]	[L1: 13.6965]	[L1: 26.1616]	54.9+1.4s
[8000/15600]	[L1: 13.6745]	[L1: 26.2059]	54.9+0.2s
[9600/15600]	[L1: 13.6488]	[L1: 26.1390]	55.0+0.2s
[11200/15600]	[L1: 13.6161]	[L1: 26.0740]	55.2+0.2s
[12800/15600]	[L1: 13.6015]	[L1: 26.0958]	54.9+0.2s
[14400/15600]	[L1: 13.6256]	[L1: 26.1245]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.383 (Best: 23.547 @epoch 136)
Forward: 4.38s

Saving...
Total: 6.79s

[Epoch 138]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.6193]	[L1: 26.3261]	55.1+2.3s
[3200/15600]	[L1: 13.7521]	[L1: 26.2796]	55.0+0.2s
[4800/15600]	[L1: 13.7250]	[L1: 26.3380]	55.0+0.2s
[6400/15600]	[L1: 13.6685]	[L1: 26.3083]	55.1+0.2s
[8000/15600]	[L1: 13.7374]	[L1: 26.3961]	54.8+0.2s
[9600/15600]	[L1: 13.6995]	[L1: 26.3348]	55.1+0.2s
[11200/15600]	[L1: 13.7200]	[L1: 26.3260]	55.0+0.2s
[12800/15600]	[L1: 13.6807]	[L1: 26.2622]	55.1+0.2s
[14400/15600]	[L1: 13.6376]	[L1: 26.2047]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.463 (Best: 23.547 @epoch 136)
Forward: 4.52s

Saving...
Total: 8.04s

[Epoch 139]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4118]	[L1: 25.9337]	55.2+5.7s
[3200/15600]	[L1: 13.4526]	[L1: 26.0777]	55.1+0.2s
[4800/15600]	[L1: 13.4604]	[L1: 26.0046]	54.9+0.2s
[6400/15600]	[L1: 13.5866]	[L1: 26.0721]	55.1+1.2s
[8000/15600]	[L1: 13.5496]	[L1: 26.1500]	55.1+0.2s
[9600/15600]	[L1: 13.6072]	[L1: 26.2111]	54.8+0.2s
[11200/15600]	[L1: 13.6104]	[L1: 26.1694]	54.9+0.2s
[12800/15600]	[L1: 13.6078]	[L1: 26.0926]	55.0+0.2s
[14400/15600]	[L1: 13.5913]	[L1: 26.0616]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.330 (Best: 23.547 @epoch 136)
Forward: 4.95s

Saving...
Total: 7.53s

[Epoch 140]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.3085]	[L1: 26.0724]	55.1+7.6s
[3200/15600]	[L1: 13.3727]	[L1: 25.9895]	55.0+0.2s
[4800/15600]	[L1: 13.4353]	[L1: 25.9838]	54.9+0.2s
[6400/15600]	[L1: 13.6070]	[L1: 26.0754]	55.2+0.2s
[8000/15600]	[L1: 13.6122]	[L1: 26.1640]	54.9+0.2s
[9600/15600]	[L1: 13.6864]	[L1: 26.2271]	55.2+0.2s
[11200/15600]	[L1: 13.7044]	[L1: 26.2479]	55.2+0.2s
[12800/15600]	[L1: 13.6759]	[L1: 26.1996]	55.0+0.2s
[14400/15600]	[L1: 13.6896]	[L1: 26.2017]	55.3+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.202 (Best: 23.547 @epoch 136)
Forward: 4.57s

Saving...
Total: 7.01s

[Epoch 141]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5043]	[L1: 26.3736]	54.8+4.2s
[3200/15600]	[L1: 13.5998]	[L1: 26.3234]	55.2+0.2s
[4800/15600]	[L1: 13.5234]	[L1: 26.2211]	55.1+0.2s
[6400/15600]	[L1: 13.4866]	[L1: 26.0784]	54.9+0.2s
[8000/15600]	[L1: 13.5148]	[L1: 26.0634]	55.0+0.2s
[9600/15600]	[L1: 13.5588]	[L1: 26.1279]	55.1+0.2s
[11200/15600]	[L1: 13.5401]	[L1: 26.1381]	54.8+0.2s
[12800/15600]	[L1: 13.5573]	[L1: 26.1622]	55.0+0.2s
[14400/15600]	[L1: 13.5778]	[L1: 26.1446]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.475 (Best: 23.547 @epoch 136)
Forward: 4.58s

Saving...
Total: 7.00s

[Epoch 142]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4286]	[L1: 25.8814]	54.9+1.8s
[3200/15600]	[L1: 13.3023]	[L1: 25.7205]	54.7+0.2s
[4800/15600]	[L1: 13.4154]	[L1: 25.8912]	54.9+0.2s
[6400/15600]	[L1: 13.4805]	[L1: 25.9584]	54.8+0.2s
[8000/15600]	[L1: 13.5283]	[L1: 26.0093]	55.0+0.2s
[9600/15600]	[L1: 13.5441]	[L1: 26.0528]	54.8+0.2s
[11200/15600]	[L1: 13.6132]	[L1: 26.0778]	55.0+0.2s
[12800/15600]	[L1: 13.5955]	[L1: 26.0961]	55.3+2.9s
[14400/15600]	[L1: 13.6224]	[L1: 26.1112]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.332 (Best: 23.547 @epoch 136)
Forward: 3.97s

Saving...
Total: 7.41s

[Epoch 143]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.9939]	[L1: 26.7767]	55.3+1.9s
[3200/15600]	[L1: 13.7406]	[L1: 26.3394]	54.8+0.2s
[4800/15600]	[L1: 13.7004]	[L1: 26.2453]	55.2+0.4s
[6400/15600]	[L1: 13.7368]	[L1: 26.2656]	55.1+2.6s
[8000/15600]	[L1: 13.6840]	[L1: 26.2299]	54.8+0.2s
[9600/15600]	[L1: 13.5959]	[L1: 26.1488]	54.9+0.2s
[11200/15600]	[L1: 13.6286]	[L1: 26.2270]	54.9+0.7s
[12800/15600]	[L1: 13.6566]	[L1: 26.2701]	54.9+0.2s
[14400/15600]	[L1: 13.6473]	[L1: 26.2656]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.371 (Best: 23.547 @epoch 136)
Forward: 4.42s

Saving...
Total: 7.00s

[Epoch 144]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4809]	[L1: 26.4383]	55.5+3.7s
[3200/15600]	[L1: 13.5953]	[L1: 26.1586]	55.1+0.2s
[4800/15600]	[L1: 13.3778]	[L1: 25.8427]	55.1+0.2s
[6400/15600]	[L1: 13.3953]	[L1: 25.9078]	55.0+0.2s
[8000/15600]	[L1: 13.4460]	[L1: 25.9053]	55.0+0.2s
[9600/15600]	[L1: 13.5345]	[L1: 26.1129]	54.8+0.2s
[11200/15600]	[L1: 13.4739]	[L1: 26.0474]	55.0+0.2s
[12800/15600]	[L1: 13.4986]	[L1: 26.0535]	55.4+0.2s
[14400/15600]	[L1: 13.4720]	[L1: 26.0482]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.170 (Best: 23.547 @epoch 136)
Forward: 4.46s

Saving...
Total: 7.93s

[Epoch 145]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5982]	[L1: 26.3874]	55.0+6.8s
[3200/15600]	[L1: 13.6609]	[L1: 26.3507]	55.1+0.2s
[4800/15600]	[L1: 13.5688]	[L1: 26.2190]	54.9+0.2s
[6400/15600]	[L1: 13.4952]	[L1: 26.1250]	55.0+1.4s
[8000/15600]	[L1: 13.5539]	[L1: 26.1706]	55.1+4.5s
[9600/15600]	[L1: 13.5210]	[L1: 26.1497]	54.8+1.6s
[11200/15600]	[L1: 13.4823]	[L1: 26.1020]	55.0+0.5s
[12800/15600]	[L1: 13.4497]	[L1: 26.0366]	54.8+0.2s
[14400/15600]	[L1: 13.4670]	[L1: 26.0540]	54.8+1.2s

Evaluation:
[SRRAW x4]	PSNR: 23.382 (Best: 23.547 @epoch 136)
Forward: 4.31s

Saving...
Total: 6.77s

[Epoch 146]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.1747]	[L1: 25.7611]	55.1+5.3s
[3200/15600]	[L1: 13.4901]	[L1: 26.1193]	55.0+0.2s
[4800/15600]	[L1: 13.6922]	[L1: 26.2672]	55.0+0.2s
[6400/15600]	[L1: 13.6049]	[L1: 26.1414]	55.1+0.2s
[8000/15600]	[L1: 13.6088]	[L1: 26.0568]	55.2+0.2s
[9600/15600]	[L1: 13.5799]	[L1: 26.0600]	54.9+0.2s
[11200/15600]	[L1: 13.5804]	[L1: 26.1164]	54.9+0.2s
[12800/15600]	[L1: 13.6302]	[L1: 26.1925]	54.9+0.2s
[14400/15600]	[L1: 13.5919]	[L1: 26.1477]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.420 (Best: 23.547 @epoch 136)
Forward: 4.61s

Saving...
Total: 7.35s

[Epoch 147]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.6576]	[L1: 26.3210]	55.2+6.1s
[3200/15600]	[L1: 13.6014]	[L1: 26.4232]	54.9+0.2s
[4800/15600]	[L1: 13.6083]	[L1: 26.2841]	55.1+0.2s
[6400/15600]	[L1: 13.4942]	[L1: 26.0714]	55.2+2.2s
[8000/15600]	[L1: 13.4872]	[L1: 26.0772]	55.1+1.1s
[9600/15600]	[L1: 13.4268]	[L1: 26.0186]	54.9+0.2s
[11200/15600]	[L1: 13.4001]	[L1: 25.9909]	54.8+2.3s
[12800/15600]	[L1: 13.4045]	[L1: 25.9756]	54.8+0.2s
[14400/15600]	[L1: 13.4764]	[L1: 26.0329]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.474 (Best: 23.547 @epoch 136)
Forward: 4.40s

Saving...
Total: 7.85s

[Epoch 148]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2763]	[L1: 25.7876]	55.4+5.4s
[3200/15600]	[L1: 13.3533]	[L1: 25.9670]	55.1+0.2s
[4800/15600]	[L1: 13.4459]	[L1: 25.9379]	55.3+0.7s
[6400/15600]	[L1: 13.5749]	[L1: 25.9174]	55.1+0.2s
[8000/15600]	[L1: 13.6539]	[L1: 25.9771]	55.1+0.2s
[9600/15600]	[L1: 13.6490]	[L1: 26.0202]	55.0+0.2s
[11200/15600]	[L1: 13.5914]	[L1: 25.9647]	55.2+0.6s
[12800/15600]	[L1: 13.5403]	[L1: 25.9436]	54.8+0.2s
[14400/15600]	[L1: 13.5535]	[L1: 26.0017]	55.1+3.3s

Evaluation:
[SRRAW x4]	PSNR: 23.482 (Best: 23.547 @epoch 136)
Forward: 4.54s

Saving...
Total: 7.08s

[Epoch 149]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5767]	[L1: 26.1445]	55.1+5.9s
[3200/15600]	[L1: 13.5364]	[L1: 25.8805]	54.9+0.2s
[4800/15600]	[L1: 13.5865]	[L1: 26.1074]	54.9+4.5s
[6400/15600]	[L1: 13.6843]	[L1: 26.2432]	55.2+0.2s
[8000/15600]	[L1: 13.6536]	[L1: 26.2822]	55.0+0.2s
[9600/15600]	[L1: 13.7088]	[L1: 26.3470]	54.9+0.2s
[11200/15600]	[L1: 13.6475]	[L1: 26.3359]	55.1+0.6s
[12800/15600]	[L1: 13.6629]	[L1: 26.3356]	55.1+0.2s
[14400/15600]	[L1: 13.7269]	[L1: 26.3683]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.506 (Best: 23.547 @epoch 136)
Forward: 4.78s

Saving...
Total: 7.19s

[Epoch 150]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5314]	[L1: 25.9026]	55.0+5.8s
[3200/15600]	[L1: 13.5505]	[L1: 26.0239]	54.9+1.2s
[4800/15600]	[L1: 13.6080]	[L1: 26.0758]	55.0+0.2s
[6400/15600]	[L1: 13.6067]	[L1: 26.2092]	55.1+0.2s
[8000/15600]	[L1: 13.7127]	[L1: 26.3487]	55.0+3.2s
[9600/15600]	[L1: 13.6115]	[L1: 26.2156]	54.9+0.6s
[11200/15600]	[L1: 13.6010]	[L1: 26.1843]	55.0+0.2s
[12800/15600]	[L1: 13.5624]	[L1: 26.1447]	55.1+0.2s
[14400/15600]	[L1: 13.5488]	[L1: 26.1259]	55.3+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.548 (Best: 23.548 @epoch 150)
Forward: 4.53s

Saving...
Total: 7.22s

[Epoch 151]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4693]	[L1: 25.8614]	55.2+8.6s
[3200/15600]	[L1: 13.5727]	[L1: 26.0613]	55.1+1.9s
[4800/15600]	[L1: 13.3940]	[L1: 25.8672]	55.0+0.2s
[6400/15600]	[L1: 13.4413]	[L1: 25.8645]	55.1+0.6s
[8000/15600]	[L1: 13.4172]	[L1: 25.8837]	55.2+0.9s
[9600/15600]	[L1: 13.3885]	[L1: 25.8345]	54.9+0.2s
[11200/15600]	[L1: 13.4245]	[L1: 25.8757]	55.3+0.2s
[12800/15600]	[L1: 13.4176]	[L1: 25.8777]	55.0+2.2s
[14400/15600]	[L1: 13.4140]	[L1: 25.8730]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.006 (Best: 23.548 @epoch 150)
Forward: 4.66s

Saving...
Total: 7.10s

[Epoch 152]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5224]	[L1: 26.2279]	55.0+6.9s
[3200/15600]	[L1: 13.4339]	[L1: 26.0726]	55.2+0.2s
[4800/15600]	[L1: 13.5310]	[L1: 26.0784]	55.0+0.2s
[6400/15600]	[L1: 13.5391]	[L1: 26.0854]	55.1+0.3s
[8000/15600]	[L1: 13.4811]	[L1: 26.1261]	55.2+0.2s
[9600/15600]	[L1: 13.4810]	[L1: 26.1235]	55.0+0.2s
[11200/15600]	[L1: 13.4168]	[L1: 26.0645]	54.9+0.2s
[12800/15600]	[L1: 13.4216]	[L1: 26.0239]	54.9+0.5s
[14400/15600]	[L1: 13.4780]	[L1: 26.0758]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.361 (Best: 23.548 @epoch 150)
Forward: 4.20s

Saving...
Total: 7.62s

[Epoch 153]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4236]	[L1: 26.0442]	55.1+3.5s
[3200/15600]	[L1: 13.4383]	[L1: 26.2654]	55.0+0.2s
[4800/15600]	[L1: 13.4369]	[L1: 26.3166]	55.1+2.6s
[6400/15600]	[L1: 13.4351]	[L1: 26.2669]	55.0+0.2s
[8000/15600]	[L1: 13.4299]	[L1: 26.1460]	55.3+0.2s
[9600/15600]	[L1: 13.4043]	[L1: 26.0903]	55.3+0.2s
[11200/15600]	[L1: 13.4420]	[L1: 26.0831]	54.9+0.2s
[12800/15600]	[L1: 13.4948]	[L1: 26.1784]	55.0+0.2s
[14400/15600]	[L1: 13.4828]	[L1: 26.1639]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.241 (Best: 23.548 @epoch 150)
Forward: 4.62s

Saving...
Total: 7.18s

[Epoch 154]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5523]	[L1: 25.9692]	55.1+6.5s
[3200/15600]	[L1: 13.8074]	[L1: 26.2076]	54.9+0.2s
[4800/15600]	[L1: 13.8266]	[L1: 26.2895]	55.0+1.3s
[6400/15600]	[L1: 13.8038]	[L1: 26.2864]	55.1+0.2s
[8000/15600]	[L1: 13.6934]	[L1: 26.2545]	55.1+0.3s
[9600/15600]	[L1: 13.6598]	[L1: 26.1598]	54.9+0.2s
[11200/15600]	[L1: 13.6255]	[L1: 26.1476]	55.0+0.2s
[12800/15600]	[L1: 13.5984]	[L1: 26.1409]	54.9+0.2s
[14400/15600]	[L1: 13.6139]	[L1: 26.1141]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.445 (Best: 23.548 @epoch 150)
Forward: 4.27s

Saving...
Total: 6.81s

[Epoch 155]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5908]	[L1: 25.7916]	55.0+6.0s
[3200/15600]	[L1: 13.5791]	[L1: 25.8257]	55.1+0.2s
[4800/15600]	[L1: 13.3920]	[L1: 25.6489]	55.3+3.2s
[6400/15600]	[L1: 13.3477]	[L1: 25.5886]	54.9+0.2s
[8000/15600]	[L1: 13.4060]	[L1: 25.7367]	54.7+0.2s
[9600/15600]	[L1: 13.4544]	[L1: 25.8624]	54.9+0.2s
[11200/15600]	[L1: 13.4174]	[L1: 25.8369]	55.2+0.2s
[12800/15600]	[L1: 13.4299]	[L1: 25.8878]	55.1+0.2s
[14400/15600]	[L1: 13.4064]	[L1: 25.9168]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.435 (Best: 23.548 @epoch 150)
Forward: 4.43s

Saving...
Total: 6.87s

[Epoch 156]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.3844]	[L1: 26.1455]	55.1+3.6s
[3200/15600]	[L1: 13.2767]	[L1: 25.9476]	55.1+1.3s
[4800/15600]	[L1: 13.3602]	[L1: 26.0660]	55.0+0.2s
[6400/15600]	[L1: 13.3124]	[L1: 25.9556]	54.9+0.2s
[8000/15600]	[L1: 13.3744]	[L1: 25.9744]	55.0+0.2s
[9600/15600]	[L1: 13.3461]	[L1: 25.9310]	54.8+1.8s
[11200/15600]	[L1: 13.3125]	[L1: 25.8903]	55.0+0.5s
[12800/15600]	[L1: 13.3707]	[L1: 25.9729]	55.1+0.7s
[14400/15600]	[L1: 13.3859]	[L1: 25.9599]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.463 (Best: 23.548 @epoch 150)
Forward: 4.55s

Saving...
Total: 8.03s

[Epoch 157]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4847]	[L1: 25.8959]	55.0+4.9s
[3200/15600]	[L1: 13.5169]	[L1: 25.9275]	54.9+0.2s
[4800/15600]	[L1: 13.4942]	[L1: 25.8333]	55.2+3.5s
[6400/15600]	[L1: 13.3891]	[L1: 25.8011]	55.3+0.2s
[8000/15600]	[L1: 13.4148]	[L1: 25.8102]	55.0+0.2s
[9600/15600]	[L1: 13.4172]	[L1: 25.8500]	54.8+0.2s
[11200/15600]	[L1: 13.4202]	[L1: 25.8742]	54.9+0.2s
[12800/15600]	[L1: 13.4200]	[L1: 25.9074]	54.8+0.2s
[14400/15600]	[L1: 13.4354]	[L1: 25.9440]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.313 (Best: 23.548 @epoch 150)
Forward: 4.72s

Saving...
Total: 8.30s

[Epoch 158]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.3813]	[L1: 25.6388]	55.2+3.7s
[3200/15600]	[L1: 13.3310]	[L1: 25.7111]	55.0+0.2s
[4800/15600]	[L1: 13.5079]	[L1: 25.8224]	55.0+4.0s
[6400/15600]	[L1: 13.5616]	[L1: 26.0802]	55.0+0.2s
[8000/15600]	[L1: 13.5571]	[L1: 26.1014]	55.2+0.2s
[9600/15600]	[L1: 13.5429]	[L1: 26.0984]	54.8+0.2s
[11200/15600]	[L1: 13.5927]	[L1: 26.1887]	54.9+0.2s
[12800/15600]	[L1: 13.5810]	[L1: 26.1793]	55.0+0.2s
[14400/15600]	[L1: 13.5744]	[L1: 26.1890]	54.7+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.519 (Best: 23.548 @epoch 150)
Forward: 4.70s

Saving...
Total: 8.14s

[Epoch 159]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2616]	[L1: 26.1577]	55.9+5.5s
[3200/15600]	[L1: 13.2513]	[L1: 25.9109]	57.8+6.2s
[4800/15600]	[L1: 13.2916]	[L1: 25.9128]	57.6+0.6s
[6400/15600]	[L1: 13.2085]	[L1: 25.8773]	58.8+5.2s
[8000/15600]	[L1: 13.2210]	[L1: 25.8213]	59.0+2.3s
[9600/15600]	[L1: 13.2046]	[L1: 25.8276]	58.9+1.5s
[11200/15600]	[L1: 13.2565]	[L1: 25.8718]	57.9+2.8s
[12800/15600]	[L1: 13.3330]	[L1: 25.9067]	58.4+0.2s
[14400/15600]	[L1: 13.2938]	[L1: 25.8557]	58.4+0.8s

Evaluation:
[SRRAW x4]	PSNR: 23.560 (Best: 23.560 @epoch 159)
Forward: 4.25s

Saving...
Total: 7.70s

[Epoch 160]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.3454]	[L1: 25.6628]	58.1+3.9s
[3200/15600]	[L1: 13.3208]	[L1: 25.9367]	54.9+0.2s
[4800/15600]	[L1: 13.4453]	[L1: 26.0964]	54.8+0.2s
[6400/15600]	[L1: 13.2988]	[L1: 25.9427]	54.9+0.2s
[8000/15600]	[L1: 13.3453]	[L1: 25.9932]	54.8+0.2s
[9600/15600]	[L1: 13.3704]	[L1: 26.0071]	55.0+0.2s
[11200/15600]	[L1: 13.3793]	[L1: 26.0693]	55.1+0.2s
[12800/15600]	[L1: 13.3316]	[L1: 25.9935]	55.3+0.2s
[14400/15600]	[L1: 13.3167]	[L1: 25.9975]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.162 (Best: 23.560 @epoch 159)
Forward: 4.36s

Saving...
Total: 6.80s

[Epoch 161]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4813]	[L1: 25.7092]	55.0+3.8s
[3200/15600]	[L1: 13.3132]	[L1: 25.6653]	54.8+0.2s
[4800/15600]	[L1: 13.2753]	[L1: 25.7407]	54.9+0.2s
[6400/15600]	[L1: 13.2827]	[L1: 25.8935]	55.0+0.2s
[8000/15600]	[L1: 13.2871]	[L1: 25.9310]	54.9+0.2s
[9600/15600]	[L1: 13.3276]	[L1: 26.0356]	55.1+0.2s
[11200/15600]	[L1: 13.3693]	[L1: 26.0370]	55.0+0.2s
[12800/15600]	[L1: 13.3676]	[L1: 25.9898]	54.8+0.2s
[14400/15600]	[L1: 13.3492]	[L1: 25.9748]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.482 (Best: 23.560 @epoch 159)
Forward: 4.80s

Saving...
Total: 7.51s

[Epoch 162]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4701]	[L1: 25.6068]	55.1+6.0s
[3200/15600]	[L1: 13.2527]	[L1: 25.5718]	54.9+0.2s
[4800/15600]	[L1: 13.2353]	[L1: 25.6668]	54.8+0.2s
[6400/15600]	[L1: 13.1933]	[L1: 25.7138]	54.8+0.2s
[8000/15600]	[L1: 13.2262]	[L1: 25.7916]	54.7+0.2s
[9600/15600]	[L1: 13.2399]	[L1: 25.7584]	54.9+0.2s
[11200/15600]	[L1: 13.2636]	[L1: 25.8042]	55.6+0.2s
[12800/15600]	[L1: 13.2759]	[L1: 25.8252]	55.1+0.2s
[14400/15600]	[L1: 13.3046]	[L1: 25.8618]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.443 (Best: 23.560 @epoch 159)
Forward: 3.95s

Saving...
Total: 7.34s

[Epoch 163]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.0448]	[L1: 26.0948]	55.0+3.5s
[3200/15600]	[L1: 13.1758]	[L1: 25.9904]	55.0+0.2s
[4800/15600]	[L1: 13.1464]	[L1: 25.7945]	55.3+0.2s
[6400/15600]	[L1: 13.2413]	[L1: 25.9086]	55.1+0.2s
[8000/15600]	[L1: 13.2998]	[L1: 25.9946]	55.1+0.2s
[9600/15600]	[L1: 13.3460]	[L1: 26.0542]	55.8+0.2s
[11200/15600]	[L1: 13.3411]	[L1: 25.9581]	55.0+5.4s
[12800/15600]	[L1: 13.3467]	[L1: 25.9596]	55.0+3.2s
[14400/15600]	[L1: 13.3329]	[L1: 25.9562]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.516 (Best: 23.560 @epoch 159)
Forward: 4.84s

Saving...
Total: 7.28s

[Epoch 164]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.1345]	[L1: 25.8359]	55.0+6.1s
[3200/15600]	[L1: 13.1708]	[L1: 25.8696]	54.9+0.2s
[4800/15600]	[L1: 13.1850]	[L1: 26.0018]	55.2+0.2s
[6400/15600]	[L1: 13.2114]	[L1: 26.0142]	55.1+0.2s
[8000/15600]	[L1: 13.2629]	[L1: 26.0246]	55.0+0.2s
[9600/15600]	[L1: 13.2849]	[L1: 26.0358]	55.2+0.2s
[11200/15600]	[L1: 13.2965]	[L1: 25.9835]	54.8+0.2s
[12800/15600]	[L1: 13.3332]	[L1: 25.9970]	55.1+0.8s
[14400/15600]	[L1: 13.3099]	[L1: 25.9471]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.435 (Best: 23.560 @epoch 159)
Forward: 4.46s

Saving...
Total: 7.21s

[Epoch 165]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4284]	[L1: 25.9326]	55.0+5.2s
[3200/15600]	[L1: 13.4105]	[L1: 25.9609]	55.0+0.2s
[4800/15600]	[L1: 13.3765]	[L1: 25.8692]	55.6+0.2s
[6400/15600]	[L1: 13.2961]	[L1: 25.7893]	55.0+0.2s
[8000/15600]	[L1: 13.2839]	[L1: 25.7181]	55.1+2.0s
[9600/15600]	[L1: 13.3268]	[L1: 25.7718]	54.9+0.2s
[11200/15600]	[L1: 13.3239]	[L1: 25.8317]	54.7+0.2s
[12800/15600]	[L1: 13.3702]	[L1: 25.9263]	54.8+0.4s
[14400/15600]	[L1: 13.3365]	[L1: 25.9259]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.369 (Best: 23.560 @epoch 159)
Forward: 4.47s

Saving...
Total: 7.90s

[Epoch 166]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.0626]	[L1: 25.7383]	55.6+8.1s
[3200/15600]	[L1: 13.0785]	[L1: 25.7432]	55.5+0.2s
[4800/15600]	[L1: 13.1273]	[L1: 25.9561]	55.7+0.2s
[6400/15600]	[L1: 13.1387]	[L1: 26.0148]	55.5+2.5s
[8000/15600]	[L1: 13.1844]	[L1: 25.9707]	55.5+0.2s
[9600/15600]	[L1: 13.1681]	[L1: 25.9232]	55.3+0.2s
[11200/15600]	[L1: 13.2154]	[L1: 25.9648]	55.6+0.2s
[12800/15600]	[L1: 13.2386]	[L1: 25.9602]	55.4+0.2s
[14400/15600]	[L1: 13.2300]	[L1: 25.9344]	55.6+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.470 (Best: 23.560 @epoch 159)
Forward: 4.36s

Saving...
Total: 7.77s

[Epoch 167]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.1270]	[L1: 25.8153]	55.6+5.3s
[3200/15600]	[L1: 13.1003]	[L1: 25.7589]	55.2+0.2s
[4800/15600]	[L1: 13.1243]	[L1: 25.8141]	55.5+0.2s
[6400/15600]	[L1: 13.2143]	[L1: 25.8251]	55.5+0.2s
[8000/15600]	[L1: 13.1873]	[L1: 25.8084]	55.3+0.2s
[9600/15600]	[L1: 13.2005]	[L1: 25.8255]	55.2+0.2s
[11200/15600]	[L1: 13.1887]	[L1: 25.8418]	55.3+0.2s
[12800/15600]	[L1: 13.2342]	[L1: 25.8623]	55.2+0.2s
[14400/15600]	[L1: 13.2954]	[L1: 25.9125]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.156 (Best: 23.560 @epoch 159)
Forward: 4.65s

Saving...
Total: 7.05s

[Epoch 168]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.1753]	[L1: 25.9844]	55.7+6.5s
[3200/15600]	[L1: 13.2596]	[L1: 25.9507]	55.0+2.3s
[4800/15600]	[L1: 13.3310]	[L1: 25.9234]	55.1+2.3s
[6400/15600]	[L1: 13.2557]	[L1: 25.9018]	55.1+0.2s
[8000/15600]	[L1: 13.3622]	[L1: 26.0353]	54.9+1.6s
[9600/15600]	[L1: 13.3573]	[L1: 26.0219]	55.0+0.9s
[11200/15600]	[L1: 13.3291]	[L1: 25.9675]	55.0+0.2s
[12800/15600]	[L1: 13.3034]	[L1: 25.9963]	55.1+0.2s
[14400/15600]	[L1: 13.3021]	[L1: 25.9913]	55.2+1.0s

Evaluation:
[SRRAW x4]	PSNR: 23.405 (Best: 23.560 @epoch 159)
Forward: 4.00s

Saving...
Total: 6.57s

[Epoch 169]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2503]	[L1: 25.5957]	55.0+4.1s
[3200/15600]	[L1: 13.3799]	[L1: 25.9700]	54.8+0.2s
[4800/15600]	[L1: 13.3321]	[L1: 25.9050]	54.8+1.1s
[6400/15600]	[L1: 13.3118]	[L1: 25.9976]	54.9+0.3s
[8000/15600]	[L1: 13.3334]	[L1: 26.0494]	54.9+0.2s
[9600/15600]	[L1: 13.3427]	[L1: 26.0197]	55.1+0.7s
[11200/15600]	[L1: 13.3166]	[L1: 25.9638]	55.3+0.2s
[12800/15600]	[L1: 13.3023]	[L1: 25.9975]	55.3+0.2s
[14400/15600]	[L1: 13.2937]	[L1: 25.9872]	55.3+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.340 (Best: 23.560 @epoch 159)
Forward: 4.34s

Saving...
Total: 6.78s

[Epoch 170]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.6382]	[L1: 26.5071]	55.3+4.9s
[3200/15600]	[L1: 13.4065]	[L1: 26.0066]	55.1+2.6s
[4800/15600]	[L1: 13.3711]	[L1: 25.9894]	54.9+0.2s
[6400/15600]	[L1: 13.3009]	[L1: 25.9254]	55.0+0.2s
[8000/15600]	[L1: 13.2389]	[L1: 25.7703]	55.2+2.6s
[9600/15600]	[L1: 13.2303]	[L1: 25.7454]	54.9+0.2s
[11200/15600]	[L1: 13.2497]	[L1: 25.7869]	55.2+0.2s
[12800/15600]	[L1: 13.2240]	[L1: 25.7772]	55.0+0.2s
[14400/15600]	[L1: 13.2111]	[L1: 25.7362]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.285 (Best: 23.560 @epoch 159)
Forward: 4.77s

Saving...
Total: 8.21s

[Epoch 171]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2846]	[L1: 25.9901]	55.3+3.6s
[3200/15600]	[L1: 13.4140]	[L1: 26.0013]	55.2+0.2s
[4800/15600]	[L1: 13.5286]	[L1: 26.3285]	55.0+0.2s
[6400/15600]	[L1: 13.5432]	[L1: 26.3144]	55.1+0.2s
[8000/15600]	[L1: 13.5417]	[L1: 26.3004]	55.0+0.2s
[9600/15600]	[L1: 13.4906]	[L1: 26.1487]	55.0+0.2s
[11200/15600]	[L1: 13.4359]	[L1: 26.0598]	55.1+0.2s
[12800/15600]	[L1: 13.3959]	[L1: 25.9810]	55.7+0.2s
[14400/15600]	[L1: 13.3584]	[L1: 25.9317]	55.2+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.522 (Best: 23.560 @epoch 159)
Forward: 4.36s

Saving...
Total: 8.00s

[Epoch 172]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5006]	[L1: 25.9862]	55.1+5.5s
[3200/15600]	[L1: 13.3154]	[L1: 25.7400]	55.1+0.2s
[4800/15600]	[L1: 13.3819]	[L1: 25.8717]	55.1+0.2s
[6400/15600]	[L1: 13.4103]	[L1: 25.9583]	55.1+0.2s
[8000/15600]	[L1: 13.3824]	[L1: 26.0661]	55.1+0.2s
[9600/15600]	[L1: 13.3930]	[L1: 26.0629]	55.2+0.2s
[11200/15600]	[L1: 13.3922]	[L1: 26.0081]	55.3+0.2s
[12800/15600]	[L1: 13.3595]	[L1: 25.9581]	55.0+0.2s
[14400/15600]	[L1: 13.3318]	[L1: 25.9217]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.197 (Best: 23.560 @epoch 159)
Forward: 4.23s

Saving...
Total: 7.77s

[Epoch 173]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.3202]	[L1: 25.7035]	55.0+6.2s
[3200/15600]	[L1: 13.3182]	[L1: 25.9346]	55.1+0.2s
[4800/15600]	[L1: 13.3805]	[L1: 26.0724]	55.0+0.2s
[6400/15600]	[L1: 13.3696]	[L1: 26.0577]	54.9+0.2s
[8000/15600]	[L1: 13.3244]	[L1: 26.0280]	55.1+0.2s
[9600/15600]	[L1: 13.2870]	[L1: 25.9895]	54.9+2.2s
[11200/15600]	[L1: 13.2339]	[L1: 25.8425]	54.8+0.2s
[12800/15600]	[L1: 13.2306]	[L1: 25.8675]	55.1+0.2s
[14400/15600]	[L1: 13.2428]	[L1: 25.8914]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.156 (Best: 23.560 @epoch 159)
Forward: 5.04s

Saving...
Total: 7.46s

[Epoch 174]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5175]	[L1: 26.4907]	55.5+2.6s
[3200/15600]	[L1: 13.3157]	[L1: 26.2462]	55.2+0.2s
[4800/15600]	[L1: 13.3553]	[L1: 26.1120]	54.9+0.2s
[6400/15600]	[L1: 13.2556]	[L1: 25.8493]	55.1+0.2s
[8000/15600]	[L1: 13.2402]	[L1: 25.8034]	55.1+0.3s
[9600/15600]	[L1: 13.1945]	[L1: 25.7100]	55.1+0.2s
[11200/15600]	[L1: 13.2426]	[L1: 25.8034]	54.9+0.2s
[12800/15600]	[L1: 13.2341]	[L1: 25.7664]	54.9+0.2s
[14400/15600]	[L1: 13.2593]	[L1: 25.8386]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.423 (Best: 23.560 @epoch 159)
Forward: 4.32s

Saving...
Total: 6.74s

[Epoch 175]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.0060]	[L1: 25.6453]	55.1+3.2s
[3200/15600]	[L1: 13.1224]	[L1: 25.7121]	54.9+0.2s
[4800/15600]	[L1: 13.1274]	[L1: 25.8292]	55.1+0.2s
[6400/15600]	[L1: 13.1384]	[L1: 25.7956]	55.2+1.6s
[8000/15600]	[L1: 13.1392]	[L1: 25.8730]	54.9+0.2s
[9600/15600]	[L1: 13.1408]	[L1: 25.8761]	55.1+0.2s
[11200/15600]	[L1: 13.1404]	[L1: 25.8975]	55.1+0.2s
[12800/15600]	[L1: 13.1531]	[L1: 25.9066]	55.0+0.2s
[14400/15600]	[L1: 13.1933]	[L1: 25.9543]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.285 (Best: 23.560 @epoch 159)
Forward: 4.44s

Saving...
Total: 6.97s

[Epoch 176]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.3993]	[L1: 26.0417]	55.4+7.7s
[3200/15600]	[L1: 13.2844]	[L1: 25.8324]	54.9+0.2s
[4800/15600]	[L1: 13.2047]	[L1: 25.8383]	55.2+0.2s
[6400/15600]	[L1: 13.2839]	[L1: 25.9139]	55.2+0.2s
[8000/15600]	[L1: 13.3243]	[L1: 25.9723]	55.1+0.2s
[9600/15600]	[L1: 13.4126]	[L1: 26.0776]	54.9+2.3s
[11200/15600]	[L1: 13.3889]	[L1: 26.0719]	54.9+0.2s
[12800/15600]	[L1: 13.3841]	[L1: 26.0354]	55.0+0.2s
[14400/15600]	[L1: 13.4246]	[L1: 26.0517]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.289 (Best: 23.560 @epoch 159)
Forward: 4.50s

Saving...
Total: 7.04s

[Epoch 177]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.5752]	[L1: 26.2780]	55.0+4.4s
[3200/15600]	[L1: 13.4384]	[L1: 26.0584]	54.9+0.2s
[4800/15600]	[L1: 13.3709]	[L1: 25.9654]	55.2+0.2s
[6400/15600]	[L1: 13.3041]	[L1: 25.8375]	55.1+0.2s
[8000/15600]	[L1: 13.3156]	[L1: 25.8163]	55.2+0.4s
[9600/15600]	[L1: 13.3352]	[L1: 25.7316]	55.0+0.3s
[11200/15600]	[L1: 13.3489]	[L1: 25.8231]	54.8+0.2s
[12800/15600]	[L1: 13.3550]	[L1: 25.8745]	54.9+0.2s
[14400/15600]	[L1: 13.3496]	[L1: 25.9012]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.271 (Best: 23.560 @epoch 159)
Forward: 4.06s

Saving...
Total: 7.48s

[Epoch 178]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2317]	[L1: 25.7757]	55.2+6.0s
[3200/15600]	[L1: 13.2634]	[L1: 25.9975]	55.2+0.2s
[4800/15600]	[L1: 13.1533]	[L1: 25.8363]	54.9+0.2s
[6400/15600]	[L1: 13.2029]	[L1: 25.9331]	54.9+0.2s
[8000/15600]	[L1: 13.1146]	[L1: 25.8209]	55.1+0.2s
[9600/15600]	[L1: 13.1556]	[L1: 25.8710]	55.1+0.2s
[11200/15600]	[L1: 13.1702]	[L1: 25.9197]	54.9+1.5s
[12800/15600]	[L1: 13.1505]	[L1: 25.9564]	55.0+0.2s
[14400/15600]	[L1: 13.1187]	[L1: 25.9091]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.601 (Best: 23.601 @epoch 178)
Forward: 4.65s

Saving...
Total: 8.27s

[Epoch 179]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.9577]	[L1: 25.5727]	55.1+2.7s
[3200/15600]	[L1: 12.8318]	[L1: 25.6242]	54.8+0.2s
[4800/15600]	[L1: 12.8983]	[L1: 25.7201]	55.0+0.2s
[6400/15600]	[L1: 12.9487]	[L1: 25.6722]	55.0+0.2s
[8000/15600]	[L1: 13.0359]	[L1: 25.7129]	54.9+1.0s
[9600/15600]	[L1: 13.0467]	[L1: 25.7541]	55.0+1.4s
[11200/15600]	[L1: 13.0867]	[L1: 25.7836]	54.8+0.2s
[12800/15600]	[L1: 13.1180]	[L1: 25.8017]	55.1+0.2s
[14400/15600]	[L1: 13.1360]	[L1: 25.8174]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.482 (Best: 23.601 @epoch 178)
Forward: 4.69s

Saving...
Total: 7.24s

[Epoch 180]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.0563]	[L1: 25.6984]	55.2+5.7s
[3200/15600]	[L1: 12.9969]	[L1: 25.5861]	55.0+0.2s
[4800/15600]	[L1: 13.0323]	[L1: 25.7424]	55.2+0.2s
[6400/15600]	[L1: 13.0430]	[L1: 25.6811]	54.8+0.2s
[8000/15600]	[L1: 13.0511]	[L1: 25.7097]	55.2+0.2s
[9600/15600]	[L1: 13.1327]	[L1: 25.8056]	55.1+0.2s
[11200/15600]	[L1: 13.1510]	[L1: 25.8323]	54.9+0.2s
[12800/15600]	[L1: 13.1374]	[L1: 25.8285]	55.2+0.2s
[14400/15600]	[L1: 13.1629]	[L1: 25.8536]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.421 (Best: 23.601 @epoch 178)
Forward: 4.95s

Saving...
Total: 7.49s

[Epoch 181]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.8551]	[L1: 25.8063]	55.2+5.0s
[3200/15600]	[L1: 13.0378]	[L1: 25.8331]	55.2+0.2s
[4800/15600]	[L1: 13.1189]	[L1: 25.8779]	55.1+0.2s
[6400/15600]	[L1: 13.1626]	[L1: 25.9388]	55.0+0.2s
[8000/15600]	[L1: 13.1773]	[L1: 26.0030]	54.9+0.2s
[9600/15600]	[L1: 13.1720]	[L1: 25.9659]	55.1+1.6s
[11200/15600]	[L1: 13.1619]	[L1: 25.9203]	54.8+0.2s
[12800/15600]	[L1: 13.1274]	[L1: 25.8792]	54.8+0.2s
[14400/15600]	[L1: 13.1379]	[L1: 25.8987]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.211 (Best: 23.601 @epoch 178)
Forward: 4.11s

Saving...
Total: 7.52s

[Epoch 182]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.8657]	[L1: 26.7574]	55.3+5.3s
[3200/15600]	[L1: 13.7764]	[L1: 26.4069]	55.3+0.6s
[4800/15600]	[L1: 13.6153]	[L1: 26.1870]	54.9+0.2s
[6400/15600]	[L1: 13.5422]	[L1: 26.1529]	55.2+0.2s
[8000/15600]	[L1: 13.4356]	[L1: 26.1360]	55.1+0.2s
[9600/15600]	[L1: 13.3709]	[L1: 25.9967]	55.0+0.2s
[11200/15600]	[L1: 13.3390]	[L1: 25.9574]	55.1+0.2s
[12800/15600]	[L1: 13.3345]	[L1: 25.9237]	55.0+0.2s
[14400/15600]	[L1: 13.3163]	[L1: 25.9253]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.430 (Best: 23.601 @epoch 178)
Forward: 4.35s

Saving...
Total: 8.04s

[Epoch 183]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.8072]	[L1: 25.6997]	55.1+6.4s
[3200/15600]	[L1: 12.9099]	[L1: 25.5635]	55.2+0.2s
[4800/15600]	[L1: 13.0184]	[L1: 25.6693]	55.2+0.2s
[6400/15600]	[L1: 13.0773]	[L1: 25.7486]	55.2+0.2s
[8000/15600]	[L1: 13.1896]	[L1: 25.8240]	55.1+0.2s
[9600/15600]	[L1: 13.2187]	[L1: 25.8498]	54.9+1.4s
[11200/15600]	[L1: 13.1997]	[L1: 25.8329]	55.1+0.5s
[12800/15600]	[L1: 13.1951]	[L1: 25.8449]	55.1+0.2s
[14400/15600]	[L1: 13.1669]	[L1: 25.8313]	55.3+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.216 (Best: 23.601 @epoch 178)
Forward: 4.78s

Saving...
Total: 7.32s

[Epoch 184]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.9179]	[L1: 25.8910]	55.2+2.9s
[3200/15600]	[L1: 13.0311]	[L1: 25.7864]	55.2+0.2s
[4800/15600]	[L1: 12.9352]	[L1: 25.4960]	55.2+0.2s
[6400/15600]	[L1: 12.9807]	[L1: 25.4613]	55.0+0.2s
[8000/15600]	[L1: 13.0436]	[L1: 25.5657]	55.3+0.2s
[9600/15600]	[L1: 13.0571]	[L1: 25.5783]	55.2+0.2s
[11200/15600]	[L1: 13.1221]	[L1: 25.6990]	55.1+0.2s
[12800/15600]	[L1: 13.1034]	[L1: 25.6966]	54.9+0.8s
[14400/15600]	[L1: 13.0828]	[L1: 25.6598]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.443 (Best: 23.601 @epoch 178)
Forward: 4.28s

Saving...
Total: 6.87s

[Epoch 185]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2895]	[L1: 26.5025]	55.1+1.7s
[3200/15600]	[L1: 13.1168]	[L1: 25.9452]	55.3+1.1s
[4800/15600]	[L1: 13.0394]	[L1: 25.8868]	55.0+0.2s
[6400/15600]	[L1: 12.9938]	[L1: 25.8152]	55.1+0.2s
[8000/15600]	[L1: 13.0312]	[L1: 25.8101]	54.8+0.2s
[9600/15600]	[L1: 13.0727]	[L1: 25.7844]	54.9+0.2s
[11200/15600]	[L1: 13.1353]	[L1: 25.8003]	55.0+0.2s
[12800/15600]	[L1: 13.1801]	[L1: 25.8889]	55.0+0.2s
[14400/15600]	[L1: 13.1941]	[L1: 25.8650]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.502 (Best: 23.601 @epoch 178)
Forward: 3.87s

Saving...
Total: 7.30s

[Epoch 186]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2985]	[L1: 26.0116]	55.1+2.4s
[3200/15600]	[L1: 13.4377]	[L1: 26.1392]	54.9+0.2s
[4800/15600]	[L1: 13.3642]	[L1: 26.2063]	55.0+0.2s
[6400/15600]	[L1: 13.2315]	[L1: 25.9904]	54.9+0.2s
[8000/15600]	[L1: 13.2335]	[L1: 25.9923]	55.1+0.2s
[9600/15600]	[L1: 13.2046]	[L1: 25.9313]	55.2+1.3s
[11200/15600]	[L1: 13.1381]	[L1: 25.8792]	55.2+0.2s
[12800/15600]	[L1: 13.1289]	[L1: 25.8258]	55.2+0.2s
[14400/15600]	[L1: 13.1341]	[L1: 25.8357]	54.8+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.433 (Best: 23.601 @epoch 178)
Forward: 4.62s

Saving...
Total: 8.16s

[Epoch 187]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.1495]	[L1: 26.1351]	55.5+7.0s
[3200/15600]	[L1: 13.1839]	[L1: 26.0154]	55.6+0.2s
[4800/15600]	[L1: 13.1634]	[L1: 25.9969]	55.1+0.2s
[6400/15600]	[L1: 13.1495]	[L1: 25.9878]	55.3+0.2s
[8000/15600]	[L1: 13.0897]	[L1: 25.8890]	55.3+0.2s
[9600/15600]	[L1: 13.1001]	[L1: 25.8287]	55.2+0.8s
[11200/15600]	[L1: 13.1052]	[L1: 25.8205]	55.0+0.2s
[12800/15600]	[L1: 13.1280]	[L1: 25.8548]	55.0+0.2s
[14400/15600]	[L1: 13.1606]	[L1: 25.8720]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.403 (Best: 23.601 @epoch 178)
Forward: 4.50s

Saving...
Total: 6.91s

[Epoch 188]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.9163]	[L1: 25.0811]	55.0+3.3s
[3200/15600]	[L1: 12.9908]	[L1: 25.4961]	55.0+0.2s
[4800/15600]	[L1: 13.0619]	[L1: 25.5715]	54.8+0.2s
[6400/15600]	[L1: 13.1408]	[L1: 25.6629]	55.2+0.2s
[8000/15600]	[L1: 13.1142]	[L1: 25.7324]	54.9+0.2s
[9600/15600]	[L1: 13.1719]	[L1: 25.7810]	54.8+0.2s
[11200/15600]	[L1: 13.1365]	[L1: 25.7565]	54.8+0.2s
[12800/15600]	[L1: 13.1958]	[L1: 25.8486]	55.1+0.2s
[14400/15600]	[L1: 13.1595]	[L1: 25.7893]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.315 (Best: 23.601 @epoch 178)
Forward: 4.84s

Saving...
Total: 7.29s

[Epoch 189]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.0211]	[L1: 25.6032]	55.6+5.9s
[3200/15600]	[L1: 13.2088]	[L1: 25.8233]	54.9+0.2s
[4800/15600]	[L1: 13.2229]	[L1: 25.9187]	55.0+0.2s
[6400/15600]	[L1: 13.1735]	[L1: 25.8142]	54.8+0.2s
[8000/15600]	[L1: 13.1357]	[L1: 25.7943]	55.0+0.6s
[9600/15600]	[L1: 13.1368]	[L1: 25.7801]	55.1+0.2s
[11200/15600]	[L1: 13.1144]	[L1: 25.7834]	55.4+0.2s
[12800/15600]	[L1: 13.0610]	[L1: 25.7228]	55.3+0.2s
[14400/15600]	[L1: 13.0597]	[L1: 25.6922]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.359 (Best: 23.601 @epoch 178)
Forward: 4.72s

Saving...
Total: 8.19s

[Epoch 190]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2251]	[L1: 26.1000]	55.2+3.0s
[3200/15600]	[L1: 13.2351]	[L1: 25.8146]	55.1+0.2s
[4800/15600]	[L1: 13.1451]	[L1: 25.7518]	54.7+0.2s
[6400/15600]	[L1: 13.0833]	[L1: 25.7982]	55.1+1.7s
[8000/15600]	[L1: 13.1716]	[L1: 25.8872]	54.8+0.2s
[9600/15600]	[L1: 13.1993]	[L1: 25.8986]	54.9+0.2s
[11200/15600]	[L1: 13.1799]	[L1: 25.8364]	54.9+0.2s
[12800/15600]	[L1: 13.1947]	[L1: 25.8393]	55.1+0.2s
[14400/15600]	[L1: 13.2164]	[L1: 25.8729]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.412 (Best: 23.601 @epoch 178)
Forward: 4.13s

Saving...
Total: 7.70s

[Epoch 191]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.1657]	[L1: 26.0793]	55.2+4.4s
[3200/15600]	[L1: 13.0755]	[L1: 25.9195]	55.1+0.2s
[4800/15600]	[L1: 12.9496]	[L1: 25.6151]	55.2+0.2s
[6400/15600]	[L1: 12.9439]	[L1: 25.5010]	55.1+0.2s
[8000/15600]	[L1: 12.9825]	[L1: 25.4831]	55.1+0.2s
[9600/15600]	[L1: 13.0449]	[L1: 25.5214]	55.2+0.2s
[11200/15600]	[L1: 13.1435]	[L1: 25.6664]	55.1+0.2s
[12800/15600]	[L1: 13.2005]	[L1: 25.7503]	55.3+0.2s
[14400/15600]	[L1: 13.1882]	[L1: 25.7666]	55.3+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.456 (Best: 23.601 @epoch 178)
Forward: 4.04s

Saving...
Total: 7.48s

[Epoch 192]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.8880]	[L1: 25.5125]	55.2+3.3s
[3200/15600]	[L1: 13.0059]	[L1: 25.6658]	54.9+0.2s
[4800/15600]	[L1: 12.9884]	[L1: 25.5972]	55.1+2.0s
[6400/15600]	[L1: 12.9898]	[L1: 25.5748]	54.9+0.2s
[8000/15600]	[L1: 12.9840]	[L1: 25.5623]	54.8+0.2s
[9600/15600]	[L1: 13.0227]	[L1: 25.6793]	55.0+0.2s
[11200/15600]	[L1: 13.0367]	[L1: 25.6537]	55.0+0.4s
[12800/15600]	[L1: 13.0262]	[L1: 25.6833]	55.1+0.2s
[14400/15600]	[L1: 13.0579]	[L1: 25.6731]	55.3+0.4s

Evaluation:
[SRRAW x4]	PSNR: 23.128 (Best: 23.601 @epoch 178)
Forward: 4.39s

Saving...
Total: 7.83s

[Epoch 193]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.4081]	[L1: 25.8582]	55.0+2.3s
[3200/15600]	[L1: 13.4405]	[L1: 25.7352]	54.7+0.2s
[4800/15600]	[L1: 13.3978]	[L1: 25.7665]	55.0+0.2s
[6400/15600]	[L1: 13.4031]	[L1: 25.7997]	54.8+0.3s
[8000/15600]	[L1: 13.3713]	[L1: 25.8512]	55.1+2.9s
[9600/15600]	[L1: 13.3447]	[L1: 25.8643]	55.1+0.2s
[11200/15600]	[L1: 13.3034]	[L1: 25.8914]	54.9+0.2s
[12800/15600]	[L1: 13.3068]	[L1: 25.9028]	54.7+0.2s
[14400/15600]	[L1: 13.2993]	[L1: 25.9281]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.580 (Best: 23.601 @epoch 178)
Forward: 4.20s

Saving...
Total: 7.77s

[Epoch 194]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.8009]	[L1: 25.4284]	55.4+3.4s
[3200/15600]	[L1: 12.7783]	[L1: 25.4195]	54.8+0.2s
[4800/15600]	[L1: 12.8480]	[L1: 25.5456]	54.9+0.2s
[6400/15600]	[L1: 12.9714]	[L1: 25.6295]	54.8+0.2s
[8000/15600]	[L1: 13.0092]	[L1: 25.6586]	54.9+0.2s
[9600/15600]	[L1: 12.9398]	[L1: 25.6292]	55.1+0.2s
[11200/15600]	[L1: 13.0248]	[L1: 25.7705]	55.0+1.3s
[12800/15600]	[L1: 13.0328]	[L1: 25.7512]	54.9+0.2s
[14400/15600]	[L1: 13.0839]	[L1: 25.8174]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.266 (Best: 23.601 @epoch 178)
Forward: 4.53s

Saving...
Total: 7.98s

[Epoch 195]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2140]	[L1: 26.1763]	55.1+3.1s
[3200/15600]	[L1: 13.2092]	[L1: 26.1818]	54.8+0.2s
[4800/15600]	[L1: 13.0990]	[L1: 25.9158]	55.1+0.2s
[6400/15600]	[L1: 12.9620]	[L1: 25.6945]	54.8+0.2s
[8000/15600]	[L1: 12.9808]	[L1: 25.6460]	54.9+0.2s
[9600/15600]	[L1: 13.0052]	[L1: 25.7316]	55.0+0.4s
[11200/15600]	[L1: 13.0986]	[L1: 25.7723]	55.2+0.2s
[12800/15600]	[L1: 13.2033]	[L1: 25.8548]	55.1+0.2s
[14400/15600]	[L1: 13.2400]	[L1: 25.8846]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.343 (Best: 23.601 @epoch 178)
Forward: 4.79s

Saving...
Total: 8.21s

[Epoch 196]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.2556]	[L1: 25.9728]	55.1+5.7s
[3200/15600]	[L1: 13.2385]	[L1: 25.9899]	55.0+1.2s
[4800/15600]	[L1: 13.2233]	[L1: 25.9496]	55.1+0.2s
[6400/15600]	[L1: 13.3255]	[L1: 26.1062]	55.1+0.2s
[8000/15600]	[L1: 13.3061]	[L1: 26.0790]	55.0+0.2s
[9600/15600]	[L1: 13.2656]	[L1: 26.1132]	54.8+0.2s
[11200/15600]	[L1: 13.2381]	[L1: 26.0479]	55.0+0.2s
[12800/15600]	[L1: 13.2327]	[L1: 26.0194]	55.1+0.2s
[14400/15600]	[L1: 13.2246]	[L1: 26.0011]	55.1+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.533 (Best: 23.601 @epoch 178)
Forward: 4.61s

Saving...
Total: 7.12s

[Epoch 197]	Learning rate: 5.00e-5
[1600/15600]	[L1: 12.8987]	[L1: 25.4701]	55.0+3.8s
[3200/15600]	[L1: 12.9383]	[L1: 25.5374]	54.9+0.2s
[4800/15600]	[L1: 12.9414]	[L1: 25.5196]	54.9+0.2s
[6400/15600]	[L1: 12.9747]	[L1: 25.6268]	54.8+0.2s
[8000/15600]	[L1: 13.0074]	[L1: 25.6791]	55.1+0.2s
[9600/15600]	[L1: 13.0583]	[L1: 25.7614]	55.0+0.2s
[11200/15600]	[L1: 13.0587]	[L1: 25.7597]	55.0+0.2s
[12800/15600]	[L1: 13.0795]	[L1: 25.7896]	55.1+0.2s
[14400/15600]	[L1: 13.1202]	[L1: 25.8251]	54.9+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.577 (Best: 23.601 @epoch 178)
Forward: 4.39s

Saving...
Total: 7.96s

[Epoch 198]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.1540]	[L1: 25.7327]	54.9+5.7s
[3200/15600]	[L1: 13.0365]	[L1: 25.6100]	55.0+0.2s
[4800/15600]	[L1: 13.0754]	[L1: 25.6288]	54.9+0.2s
[6400/15600]	[L1: 13.0758]	[L1: 25.6719]	55.0+2.0s
[8000/15600]	[L1: 13.0945]	[L1: 25.7103]	55.2+0.2s
[9600/15600]	[L1: 13.0888]	[L1: 25.7703]	54.8+0.2s
[11200/15600]	[L1: 13.1172]	[L1: 25.7875]	54.8+0.2s
[12800/15600]	[L1: 13.1139]	[L1: 25.8014]	55.0+1.6s
[14400/15600]	[L1: 13.1556]	[L1: 25.8057]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.421 (Best: 23.601 @epoch 178)
Forward: 4.53s

Saving...
Total: 6.97s

[Epoch 199]	Learning rate: 5.00e-5
[1600/15600]	[L1: 13.0857]	[L1: 25.9219]	55.3+5.1s
[3200/15600]	[L1: 13.0338]	[L1: 25.7985]	55.1+0.2s
[4800/15600]	[L1: 12.9335]	[L1: 25.7290]	54.9+0.2s
[6400/15600]	[L1: 12.9283]	[L1: 25.6936]	55.1+0.2s
[8000/15600]	[L1: 12.9307]	[L1: 25.6458]	55.2+2.2s
[9600/15600]	[L1: 12.9861]	[L1: 25.7554]	54.9+0.2s
[11200/15600]	[L1: 13.0032]	[L1: 25.7386]	55.3+0.2s
[12800/15600]	[L1: 12.9905]	[L1: 25.7136]	55.2+0.2s
[14400/15600]	[L1: 13.0444]	[L1: 25.7971]	55.0+0.2s

Evaluation:
[SRRAW x4]	PSNR: 23.405 (Best: 23.601 @epoch 178)
Forward: 4.28s

Saving...
Total: 7.70s

[Epoch 200]	Learning rate: 5.00e-5
